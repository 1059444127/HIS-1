//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5466
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Ts_zyys_hzgl {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private HzdDataTable tableHzd;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Hzd"] != null)) {
                    base.Tables.Add(new HzdDataTable(ds.Tables["Hzd"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HzdDataTable Hzd {
            get {
                return this.tableHzd;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Hzd"] != null)) {
                    base.Tables.Add(new HzdDataTable(ds.Tables["Hzd"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableHzd = ((HzdDataTable)(base.Tables["Hzd"]));
            if ((initTable == true)) {
                if ((this.tableHzd != null)) {
                    this.tableHzd.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableHzd = new HzdDataTable();
            base.Tables.Add(this.tableHzd);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHzd() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void HzdRowChangeEventHandler(object sender, HzdRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HzdDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column姓名;
            
            private global::System.Data.DataColumn column床号;
            
            private global::System.Data.DataColumn column住院号;
            
            private global::System.Data.DataColumn column病区;
            
            private global::System.Data.DataColumn column年龄;
            
            private global::System.Data.DataColumn column性别;
            
            private global::System.Data.DataColumn column简要病史及检查;
            
            private global::System.Data.DataColumn column会诊目的;
            
            private global::System.Data.DataColumn column申请医师;
            
            private global::System.Data.DataColumn column申请日期;
            
            private global::System.Data.DataColumn column会诊意见;
            
            private global::System.Data.DataColumn column会诊医师;
            
            private global::System.Data.DataColumn column会诊日期;
            
            private global::System.Data.DataColumn columnbz2;
            
            private global::System.Data.DataColumn columnbz1;
            
            private global::System.Data.DataColumn columnbz3;
            
            private global::System.Data.DataColumn columnbz4;
            
            private global::System.Data.DataColumn columnbz5;
            
            private global::System.Data.DataColumn columnbz6;
            
            private global::System.Data.DataColumn columnbz7;
            
            private global::System.Data.DataColumn column被邀科室;
            
            private global::System.Data.DataColumn column科室;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HzdDataTable() {
                this.TableName = "Hzd";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HzdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HzdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 姓名Column {
                get {
                    return this.column姓名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 床号Column {
                get {
                    return this.column床号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 住院号Column {
                get {
                    return this.column住院号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 病区Column {
                get {
                    return this.column病区;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 年龄Column {
                get {
                    return this.column年龄;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 性别Column {
                get {
                    return this.column性别;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 简要病史及检查Column {
                get {
                    return this.column简要病史及检查;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 会诊目的Column {
                get {
                    return this.column会诊目的;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 申请医师Column {
                get {
                    return this.column申请医师;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 申请日期Column {
                get {
                    return this.column申请日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 会诊意见Column {
                get {
                    return this.column会诊意见;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 会诊医师Column {
                get {
                    return this.column会诊医师;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 会诊日期Column {
                get {
                    return this.column会诊日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bz2Column {
                get {
                    return this.columnbz2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bz1Column {
                get {
                    return this.columnbz1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bz3Column {
                get {
                    return this.columnbz3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bz4Column {
                get {
                    return this.columnbz4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bz5Column {
                get {
                    return this.columnbz5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bz6Column {
                get {
                    return this.columnbz6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bz7Column {
                get {
                    return this.columnbz7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 被邀科室Column {
                get {
                    return this.column被邀科室;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 科室Column {
                get {
                    return this.column科室;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HzdRow this[int index] {
                get {
                    return ((HzdRow)(this.Rows[index]));
                }
            }
            
            public event HzdRowChangeEventHandler HzdRowChanging;
            
            public event HzdRowChangeEventHandler HzdRowChanged;
            
            public event HzdRowChangeEventHandler HzdRowDeleting;
            
            public event HzdRowChangeEventHandler HzdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHzdRow(HzdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HzdRow AddHzdRow(
                        string 姓名, 
                        string 床号, 
                        string 住院号, 
                        string 病区, 
                        string 年龄, 
                        string 性别, 
                        string 简要病史及检查, 
                        string 会诊目的, 
                        string 申请医师, 
                        string 申请日期, 
                        string 会诊意见, 
                        string 会诊医师, 
                        string 会诊日期, 
                        string bz2, 
                        string bz1, 
                        string bz3, 
                        string bz4, 
                        string bz5, 
                        string bz6, 
                        string bz7, 
                        string 被邀科室, 
                        string 科室) {
                HzdRow rowHzdRow = ((HzdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        姓名,
                        床号,
                        住院号,
                        病区,
                        年龄,
                        性别,
                        简要病史及检查,
                        会诊目的,
                        申请医师,
                        申请日期,
                        会诊意见,
                        会诊医师,
                        会诊日期,
                        bz2,
                        bz1,
                        bz3,
                        bz4,
                        bz5,
                        bz6,
                        bz7,
                        被邀科室,
                        科室};
                rowHzdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHzdRow);
                return rowHzdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HzdDataTable cln = ((HzdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HzdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column姓名 = base.Columns["姓名"];
                this.column床号 = base.Columns["床号"];
                this.column住院号 = base.Columns["住院号"];
                this.column病区 = base.Columns["病区"];
                this.column年龄 = base.Columns["年龄"];
                this.column性别 = base.Columns["性别"];
                this.column简要病史及检查 = base.Columns["简要病史及检查"];
                this.column会诊目的 = base.Columns["会诊目的"];
                this.column申请医师 = base.Columns["申请医师"];
                this.column申请日期 = base.Columns["申请日期"];
                this.column会诊意见 = base.Columns["会诊意见"];
                this.column会诊医师 = base.Columns["会诊医师"];
                this.column会诊日期 = base.Columns["会诊日期"];
                this.columnbz2 = base.Columns["bz2"];
                this.columnbz1 = base.Columns["bz1"];
                this.columnbz3 = base.Columns["bz3"];
                this.columnbz4 = base.Columns["bz4"];
                this.columnbz5 = base.Columns["bz5"];
                this.columnbz6 = base.Columns["bz6"];
                this.columnbz7 = base.Columns["bz7"];
                this.column被邀科室 = base.Columns["被邀科室"];
                this.column科室 = base.Columns["科室"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column姓名 = new global::System.Data.DataColumn("姓名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column姓名);
                this.column床号 = new global::System.Data.DataColumn("床号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column床号);
                this.column住院号 = new global::System.Data.DataColumn("住院号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column住院号);
                this.column病区 = new global::System.Data.DataColumn("病区", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column病区);
                this.column年龄 = new global::System.Data.DataColumn("年龄", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column年龄);
                this.column性别 = new global::System.Data.DataColumn("性别", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column性别);
                this.column简要病史及检查 = new global::System.Data.DataColumn("简要病史及检查", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column简要病史及检查);
                this.column会诊目的 = new global::System.Data.DataColumn("会诊目的", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column会诊目的);
                this.column申请医师 = new global::System.Data.DataColumn("申请医师", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column申请医师);
                this.column申请日期 = new global::System.Data.DataColumn("申请日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column申请日期);
                this.column会诊意见 = new global::System.Data.DataColumn("会诊意见", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column会诊意见);
                this.column会诊医师 = new global::System.Data.DataColumn("会诊医师", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column会诊医师);
                this.column会诊日期 = new global::System.Data.DataColumn("会诊日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column会诊日期);
                this.columnbz2 = new global::System.Data.DataColumn("bz2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbz2);
                this.columnbz1 = new global::System.Data.DataColumn("bz1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbz1);
                this.columnbz3 = new global::System.Data.DataColumn("bz3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbz3);
                this.columnbz4 = new global::System.Data.DataColumn("bz4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbz4);
                this.columnbz5 = new global::System.Data.DataColumn("bz5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbz5);
                this.columnbz6 = new global::System.Data.DataColumn("bz6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbz6);
                this.columnbz7 = new global::System.Data.DataColumn("bz7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbz7);
                this.column被邀科室 = new global::System.Data.DataColumn("被邀科室", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column被邀科室);
                this.column科室 = new global::System.Data.DataColumn("科室", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column科室);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HzdRow NewHzdRow() {
                return ((HzdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HzdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HzdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HzdRowChanged != null)) {
                    this.HzdRowChanged(this, new HzdRowChangeEvent(((HzdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HzdRowChanging != null)) {
                    this.HzdRowChanging(this, new HzdRowChangeEvent(((HzdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HzdRowDeleted != null)) {
                    this.HzdRowDeleted(this, new HzdRowChangeEvent(((HzdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HzdRowDeleting != null)) {
                    this.HzdRowDeleting(this, new HzdRowChangeEvent(((HzdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHzdRow(HzdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HzdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HzdRow : global::System.Data.DataRow {
            
            private HzdDataTable tableHzd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HzdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHzd = ((HzdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 姓名 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.姓名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“姓名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.姓名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 床号 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.床号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“床号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.床号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 住院号 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.住院号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“住院号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.住院号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病区 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.病区Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“病区”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.病区Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 年龄 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.年龄Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“年龄”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.年龄Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 性别 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.性别Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“性别”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.性别Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 简要病史及检查 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.简要病史及检查Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“简要病史及检查”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.简要病史及检查Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 会诊目的 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.会诊目的Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“会诊目的”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.会诊目的Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 申请医师 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.申请医师Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“申请医师”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.申请医师Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 申请日期 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.申请日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“申请日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.申请日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 会诊意见 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.会诊意见Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“会诊意见”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.会诊意见Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 会诊医师 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.会诊医师Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“会诊医师”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.会诊医师Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 会诊日期 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.会诊日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“会诊日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.会诊日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bz2 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.bz2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“bz2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.bz2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bz1 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.bz1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“bz1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.bz1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bz3 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.bz3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“bz3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.bz3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bz4 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.bz4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“bz4”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.bz4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bz5 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.bz5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“bz5”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.bz5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bz6 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.bz6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“bz6”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.bz6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bz7 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.bz7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“bz7”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.bz7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 被邀科室 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.被邀科室Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“被邀科室”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.被邀科室Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 科室 {
                get {
                    try {
                        return ((string)(this[this.tableHzd.科室Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Hzd”中列“科室”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHzd.科室Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is姓名Null() {
                return this.IsNull(this.tableHzd.姓名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set姓名Null() {
                this[this.tableHzd.姓名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is床号Null() {
                return this.IsNull(this.tableHzd.床号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set床号Null() {
                this[this.tableHzd.床号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is住院号Null() {
                return this.IsNull(this.tableHzd.住院号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set住院号Null() {
                this[this.tableHzd.住院号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病区Null() {
                return this.IsNull(this.tableHzd.病区Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病区Null() {
                this[this.tableHzd.病区Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is年龄Null() {
                return this.IsNull(this.tableHzd.年龄Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set年龄Null() {
                this[this.tableHzd.年龄Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is性别Null() {
                return this.IsNull(this.tableHzd.性别Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set性别Null() {
                this[this.tableHzd.性别Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is简要病史及检查Null() {
                return this.IsNull(this.tableHzd.简要病史及检查Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set简要病史及检查Null() {
                this[this.tableHzd.简要病史及检查Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is会诊目的Null() {
                return this.IsNull(this.tableHzd.会诊目的Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set会诊目的Null() {
                this[this.tableHzd.会诊目的Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is申请医师Null() {
                return this.IsNull(this.tableHzd.申请医师Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set申请医师Null() {
                this[this.tableHzd.申请医师Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is申请日期Null() {
                return this.IsNull(this.tableHzd.申请日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set申请日期Null() {
                this[this.tableHzd.申请日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is会诊意见Null() {
                return this.IsNull(this.tableHzd.会诊意见Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set会诊意见Null() {
                this[this.tableHzd.会诊意见Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is会诊医师Null() {
                return this.IsNull(this.tableHzd.会诊医师Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set会诊医师Null() {
                this[this.tableHzd.会诊医师Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is会诊日期Null() {
                return this.IsNull(this.tableHzd.会诊日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set会诊日期Null() {
                this[this.tableHzd.会诊日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbz2Null() {
                return this.IsNull(this.tableHzd.bz2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbz2Null() {
                this[this.tableHzd.bz2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbz1Null() {
                return this.IsNull(this.tableHzd.bz1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbz1Null() {
                this[this.tableHzd.bz1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbz3Null() {
                return this.IsNull(this.tableHzd.bz3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbz3Null() {
                this[this.tableHzd.bz3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbz4Null() {
                return this.IsNull(this.tableHzd.bz4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbz4Null() {
                this[this.tableHzd.bz4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbz5Null() {
                return this.IsNull(this.tableHzd.bz5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbz5Null() {
                this[this.tableHzd.bz5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbz6Null() {
                return this.IsNull(this.tableHzd.bz6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbz6Null() {
                this[this.tableHzd.bz6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbz7Null() {
                return this.IsNull(this.tableHzd.bz7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbz7Null() {
                this[this.tableHzd.bz7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is被邀科室Null() {
                return this.IsNull(this.tableHzd.被邀科室Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set被邀科室Null() {
                this[this.tableHzd.被邀科室Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is科室Null() {
                return this.IsNull(this.tableHzd.科室Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set科室Null() {
                this[this.tableHzd.科室Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HzdRowChangeEvent : global::System.EventArgs {
            
            private HzdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HzdRowChangeEvent(HzdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HzdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591