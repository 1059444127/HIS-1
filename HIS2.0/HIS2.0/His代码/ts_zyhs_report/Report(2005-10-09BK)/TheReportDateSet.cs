//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace 护士工作站{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class TheReportDateSet : DataSet {
        
        private tabzxdDataTable tabletabzxd;
        
        private tabfeelistDataTable tabletabfeelist;
        
        private tabGrdDataTable tabletabGrd;
        
        public TheReportDateSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected TheReportDateSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tabzxd"] != null)) {
                    this.Tables.Add(new tabzxdDataTable(ds.Tables["tabzxd"]));
                }
                if ((ds.Tables["tabfeelist"] != null)) {
                    this.Tables.Add(new tabfeelistDataTable(ds.Tables["tabfeelist"]));
                }
                if ((ds.Tables["tabGrd"] != null)) {
                    this.Tables.Add(new tabGrdDataTable(ds.Tables["tabGrd"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tabzxdDataTable tabzxd {
            get {
                return this.tabletabzxd;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tabfeelistDataTable tabfeelist {
            get {
                return this.tabletabfeelist;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tabGrdDataTable tabGrd {
            get {
                return this.tabletabGrd;
            }
        }
        
        public override DataSet Clone() {
            TheReportDateSet cln = ((TheReportDateSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tabzxd"] != null)) {
                this.Tables.Add(new tabzxdDataTable(ds.Tables["tabzxd"]));
            }
            if ((ds.Tables["tabfeelist"] != null)) {
                this.Tables.Add(new tabfeelistDataTable(ds.Tables["tabfeelist"]));
            }
            if ((ds.Tables["tabGrd"] != null)) {
                this.Tables.Add(new tabGrdDataTable(ds.Tables["tabGrd"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletabzxd = ((tabzxdDataTable)(this.Tables["tabzxd"]));
            if ((this.tabletabzxd != null)) {
                this.tabletabzxd.InitVars();
            }
            this.tabletabfeelist = ((tabfeelistDataTable)(this.Tables["tabfeelist"]));
            if ((this.tabletabfeelist != null)) {
                this.tabletabfeelist.InitVars();
            }
            this.tabletabGrd = ((tabGrdDataTable)(this.Tables["tabGrd"]));
            if ((this.tabletabGrd != null)) {
                this.tabletabGrd.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "TheReportDateSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TheReportDateSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletabzxd = new tabzxdDataTable();
            this.Tables.Add(this.tabletabzxd);
            this.tabletabfeelist = new tabfeelistDataTable();
            this.Tables.Add(this.tabletabfeelist);
            this.tabletabGrd = new tabGrdDataTable();
            this.Tables.Add(this.tabletabGrd);
        }
        
        private bool ShouldSerializetabzxd() {
            return false;
        }
        
        private bool ShouldSerializetabfeelist() {
            return false;
        }
        
        private bool ShouldSerializetabGrd() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tabzxdRowChangeEventHandler(object sender, tabzxdRowChangeEvent e);
        
        public delegate void tabfeelistRowChangeEventHandler(object sender, tabfeelistRowChangeEvent e);
        
        public delegate void tabGrdRowChangeEventHandler(object sender, tabGrdRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabzxdDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnbedno;
            
            private DataColumn columnname;
            
            private DataColumn columndeptname;
            
            private DataColumn columnnl;
            
            private DataColumn columnbegindate;
            
            private DataColumn columns_spm;
            
            private DataColumn columnnum;
            
            private DataColumn columnusage;
            
            private DataColumn columnfrequency;
            
            internal tabzxdDataTable() : 
                    base("tabzxd") {
                this.InitClass();
            }
            
            internal tabzxdDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn bednoColumn {
                get {
                    return this.columnbedno;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn deptnameColumn {
                get {
                    return this.columndeptname;
                }
            }
            
            internal DataColumn nlColumn {
                get {
                    return this.columnnl;
                }
            }
            
            internal DataColumn begindateColumn {
                get {
                    return this.columnbegindate;
                }
            }
            
            internal DataColumn s_spmColumn {
                get {
                    return this.columns_spm;
                }
            }
            
            internal DataColumn numColumn {
                get {
                    return this.columnnum;
                }
            }
            
            internal DataColumn usageColumn {
                get {
                    return this.columnusage;
                }
            }
            
            internal DataColumn frequencyColumn {
                get {
                    return this.columnfrequency;
                }
            }
            
            public tabzxdRow this[int index] {
                get {
                    return ((tabzxdRow)(this.Rows[index]));
                }
            }
            
            public event tabzxdRowChangeEventHandler tabzxdRowChanged;
            
            public event tabzxdRowChangeEventHandler tabzxdRowChanging;
            
            public event tabzxdRowChangeEventHandler tabzxdRowDeleted;
            
            public event tabzxdRowChangeEventHandler tabzxdRowDeleting;
            
            public void AddtabzxdRow(tabzxdRow row) {
                this.Rows.Add(row);
            }
            
            public tabzxdRow AddtabzxdRow(long bedno, string name, string deptname, int nl, System.DateTime begindate, string s_spm, System.Double num, string usage, string frequency) {
                tabzxdRow rowtabzxdRow = ((tabzxdRow)(this.NewRow()));
                rowtabzxdRow.ItemArray = new object[] {
                        bedno,
                        name,
                        deptname,
                        nl,
                        begindate,
                        s_spm,
                        num,
                        usage,
                        frequency};
                this.Rows.Add(rowtabzxdRow);
                return rowtabzxdRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tabzxdDataTable cln = ((tabzxdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tabzxdDataTable();
            }
            
            internal void InitVars() {
                this.columnbedno = this.Columns["bedno"];
                this.columnname = this.Columns["name"];
                this.columndeptname = this.Columns["deptname"];
                this.columnnl = this.Columns["nl"];
                this.columnbegindate = this.Columns["begindate"];
                this.columns_spm = this.Columns["s_spm"];
                this.columnnum = this.Columns["num"];
                this.columnusage = this.Columns["usage"];
                this.columnfrequency = this.Columns["frequency"];
            }
            
            private void InitClass() {
                this.columnbedno = new DataColumn("bedno", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbedno);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columndeptname = new DataColumn("deptname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndeptname);
                this.columnnl = new DataColumn("nl", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnl);
                this.columnbegindate = new DataColumn("begindate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbegindate);
                this.columns_spm = new DataColumn("s_spm", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columns_spm);
                this.columnnum = new DataColumn("num", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnum);
                this.columnusage = new DataColumn("usage", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnusage);
                this.columnfrequency = new DataColumn("frequency", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfrequency);
            }
            
            public tabzxdRow NewtabzxdRow() {
                return ((tabzxdRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tabzxdRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tabzxdRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tabzxdRowChanged != null)) {
                    this.tabzxdRowChanged(this, new tabzxdRowChangeEvent(((tabzxdRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tabzxdRowChanging != null)) {
                    this.tabzxdRowChanging(this, new tabzxdRowChangeEvent(((tabzxdRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tabzxdRowDeleted != null)) {
                    this.tabzxdRowDeleted(this, new tabzxdRowChangeEvent(((tabzxdRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tabzxdRowDeleting != null)) {
                    this.tabzxdRowDeleting(this, new tabzxdRowChangeEvent(((tabzxdRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetabzxdRow(tabzxdRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabzxdRow : DataRow {
            
            private tabzxdDataTable tabletabzxd;
            
            internal tabzxdRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletabzxd = ((tabzxdDataTable)(this.Table));
            }
            
            public long bedno {
                get {
                    try {
                        return ((long)(this[this.tabletabzxd.bednoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabzxd.bednoColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tabletabzxd.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabzxd.nameColumn] = value;
                }
            }
            
            public string deptname {
                get {
                    try {
                        return ((string)(this[this.tabletabzxd.deptnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabzxd.deptnameColumn] = value;
                }
            }
            
            public int nl {
                get {
                    try {
                        return ((int)(this[this.tabletabzxd.nlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabzxd.nlColumn] = value;
                }
            }
            
            public System.DateTime begindate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabletabzxd.begindateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabzxd.begindateColumn] = value;
                }
            }
            
            public string s_spm {
                get {
                    try {
                        return ((string)(this[this.tabletabzxd.s_spmColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabzxd.s_spmColumn] = value;
                }
            }
            
            public System.Double num {
                get {
                    try {
                        return ((System.Double)(this[this.tabletabzxd.numColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabzxd.numColumn] = value;
                }
            }
            
            public string usage {
                get {
                    try {
                        return ((string)(this[this.tabletabzxd.usageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabzxd.usageColumn] = value;
                }
            }
            
            public string frequency {
                get {
                    try {
                        return ((string)(this[this.tabletabzxd.frequencyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabzxd.frequencyColumn] = value;
                }
            }
            
            public bool IsbednoNull() {
                return this.IsNull(this.tabletabzxd.bednoColumn);
            }
            
            public void SetbednoNull() {
                this[this.tabletabzxd.bednoColumn] = System.Convert.DBNull;
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tabletabzxd.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tabletabzxd.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsdeptnameNull() {
                return this.IsNull(this.tabletabzxd.deptnameColumn);
            }
            
            public void SetdeptnameNull() {
                this[this.tabletabzxd.deptnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsnlNull() {
                return this.IsNull(this.tabletabzxd.nlColumn);
            }
            
            public void SetnlNull() {
                this[this.tabletabzxd.nlColumn] = System.Convert.DBNull;
            }
            
            public bool IsbegindateNull() {
                return this.IsNull(this.tabletabzxd.begindateColumn);
            }
            
            public void SetbegindateNull() {
                this[this.tabletabzxd.begindateColumn] = System.Convert.DBNull;
            }
            
            public bool Iss_spmNull() {
                return this.IsNull(this.tabletabzxd.s_spmColumn);
            }
            
            public void Sets_spmNull() {
                this[this.tabletabzxd.s_spmColumn] = System.Convert.DBNull;
            }
            
            public bool IsnumNull() {
                return this.IsNull(this.tabletabzxd.numColumn);
            }
            
            public void SetnumNull() {
                this[this.tabletabzxd.numColumn] = System.Convert.DBNull;
            }
            
            public bool IsusageNull() {
                return this.IsNull(this.tabletabzxd.usageColumn);
            }
            
            public void SetusageNull() {
                this[this.tabletabzxd.usageColumn] = System.Convert.DBNull;
            }
            
            public bool IsfrequencyNull() {
                return this.IsNull(this.tabletabzxd.frequencyColumn);
            }
            
            public void SetfrequencyNull() {
                this[this.tabletabzxd.frequencyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabzxdRowChangeEvent : EventArgs {
            
            private tabzxdRow eventRow;
            
            private DataRowAction eventAction;
            
            public tabzxdRowChangeEvent(tabzxdRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tabzxdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabfeelistDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnItem_Name;
            
            private DataColumn columnItemValues;
            
            private DataColumn columnName;
            
            internal tabfeelistDataTable() : 
                    base("tabfeelist") {
                this.InitClass();
            }
            
            internal tabfeelistDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Item_NameColumn {
                get {
                    return this.columnItem_Name;
                }
            }
            
            internal DataColumn ItemValuesColumn {
                get {
                    return this.columnItemValues;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public tabfeelistRow this[int index] {
                get {
                    return ((tabfeelistRow)(this.Rows[index]));
                }
            }
            
            public event tabfeelistRowChangeEventHandler tabfeelistRowChanged;
            
            public event tabfeelistRowChangeEventHandler tabfeelistRowChanging;
            
            public event tabfeelistRowChangeEventHandler tabfeelistRowDeleted;
            
            public event tabfeelistRowChangeEventHandler tabfeelistRowDeleting;
            
            public void AddtabfeelistRow(tabfeelistRow row) {
                this.Rows.Add(row);
            }
            
            public tabfeelistRow AddtabfeelistRow(string Item_Name, System.Double ItemValues, string Name) {
                tabfeelistRow rowtabfeelistRow = ((tabfeelistRow)(this.NewRow()));
                rowtabfeelistRow.ItemArray = new object[] {
                        Item_Name,
                        ItemValues,
                        Name};
                this.Rows.Add(rowtabfeelistRow);
                return rowtabfeelistRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tabfeelistDataTable cln = ((tabfeelistDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tabfeelistDataTable();
            }
            
            internal void InitVars() {
                this.columnItem_Name = this.Columns["Item_Name"];
                this.columnItemValues = this.Columns["ItemValues"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnItem_Name = new DataColumn("Item_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItem_Name);
                this.columnItemValues = new DataColumn("ItemValues", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemValues);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
            }
            
            public tabfeelistRow NewtabfeelistRow() {
                return ((tabfeelistRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tabfeelistRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tabfeelistRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tabfeelistRowChanged != null)) {
                    this.tabfeelistRowChanged(this, new tabfeelistRowChangeEvent(((tabfeelistRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tabfeelistRowChanging != null)) {
                    this.tabfeelistRowChanging(this, new tabfeelistRowChangeEvent(((tabfeelistRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tabfeelistRowDeleted != null)) {
                    this.tabfeelistRowDeleted(this, new tabfeelistRowChangeEvent(((tabfeelistRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tabfeelistRowDeleting != null)) {
                    this.tabfeelistRowDeleting(this, new tabfeelistRowChangeEvent(((tabfeelistRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetabfeelistRow(tabfeelistRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabfeelistRow : DataRow {
            
            private tabfeelistDataTable tabletabfeelist;
            
            internal tabfeelistRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletabfeelist = ((tabfeelistDataTable)(this.Table));
            }
            
            public string Item_Name {
                get {
                    try {
                        return ((string)(this[this.tabletabfeelist.Item_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabfeelist.Item_NameColumn] = value;
                }
            }
            
            public System.Double ItemValues {
                get {
                    try {
                        return ((System.Double)(this[this.tabletabfeelist.ItemValuesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabfeelist.ItemValuesColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tabletabfeelist.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabfeelist.NameColumn] = value;
                }
            }
            
            public bool IsItem_NameNull() {
                return this.IsNull(this.tabletabfeelist.Item_NameColumn);
            }
            
            public void SetItem_NameNull() {
                this[this.tabletabfeelist.Item_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemValuesNull() {
                return this.IsNull(this.tabletabfeelist.ItemValuesColumn);
            }
            
            public void SetItemValuesNull() {
                this[this.tabletabfeelist.ItemValuesColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tabletabfeelist.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tabletabfeelist.NameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabfeelistRowChangeEvent : EventArgs {
            
            private tabfeelistRow eventRow;
            
            private DataRowAction eventAction;
            
            public tabfeelistRowChangeEvent(tabfeelistRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tabfeelistRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabGrdDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBed_No;
            
            private DataColumn columnname;
            
            private DataColumn columninpatient_no;
            
            private DataColumn columnin_date;
            
            private DataColumn columnsex;
            
            private DataColumn columninpatient_id;
            
            private DataColumn columnselected;
            
            private DataColumn columnyjj;
            
            private DataColumn columntotal;
            
            private DataColumn columnye;
            
            private DataColumn columnjslx;
            
            private DataColumn columnbjj;
            
            internal tabGrdDataTable() : 
                    base("tabGrd") {
                this.InitClass();
            }
            
            internal tabGrdDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Bed_NoColumn {
                get {
                    return this.columnBed_No;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn inpatient_noColumn {
                get {
                    return this.columninpatient_no;
                }
            }
            
            internal DataColumn in_dateColumn {
                get {
                    return this.columnin_date;
                }
            }
            
            internal DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            internal DataColumn inpatient_idColumn {
                get {
                    return this.columninpatient_id;
                }
            }
            
            internal DataColumn selectedColumn {
                get {
                    return this.columnselected;
                }
            }
            
            internal DataColumn yjjColumn {
                get {
                    return this.columnyjj;
                }
            }
            
            internal DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            internal DataColumn yeColumn {
                get {
                    return this.columnye;
                }
            }
            
            internal DataColumn jslxColumn {
                get {
                    return this.columnjslx;
                }
            }
            
            internal DataColumn bjjColumn {
                get {
                    return this.columnbjj;
                }
            }
            
            public tabGrdRow this[int index] {
                get {
                    return ((tabGrdRow)(this.Rows[index]));
                }
            }
            
            public event tabGrdRowChangeEventHandler tabGrdRowChanged;
            
            public event tabGrdRowChangeEventHandler tabGrdRowChanging;
            
            public event tabGrdRowChangeEventHandler tabGrdRowDeleted;
            
            public event tabGrdRowChangeEventHandler tabGrdRowDeleting;
            
            public void AddtabGrdRow(tabGrdRow row) {
                this.Rows.Add(row);
            }
            
            public tabGrdRow AddtabGrdRow(string Bed_No, string name, string inpatient_no, string in_date, string sex, string inpatient_id, bool selected, string yjj, string total, string ye, string jslx, string bjj) {
                tabGrdRow rowtabGrdRow = ((tabGrdRow)(this.NewRow()));
                rowtabGrdRow.ItemArray = new object[] {
                        Bed_No,
                        name,
                        inpatient_no,
                        in_date,
                        sex,
                        inpatient_id,
                        selected,
                        yjj,
                        total,
                        ye,
                        jslx,
                        bjj};
                this.Rows.Add(rowtabGrdRow);
                return rowtabGrdRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tabGrdDataTable cln = ((tabGrdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tabGrdDataTable();
            }
            
            internal void InitVars() {
                this.columnBed_No = this.Columns["Bed_No"];
                this.columnname = this.Columns["name"];
                this.columninpatient_no = this.Columns["inpatient_no"];
                this.columnin_date = this.Columns["in_date"];
                this.columnsex = this.Columns["sex"];
                this.columninpatient_id = this.Columns["inpatient_id"];
                this.columnselected = this.Columns["selected"];
                this.columnyjj = this.Columns["yjj"];
                this.columntotal = this.Columns["total"];
                this.columnye = this.Columns["ye"];
                this.columnjslx = this.Columns["jslx"];
                this.columnbjj = this.Columns["bjj"];
            }
            
            private void InitClass() {
                this.columnBed_No = new DataColumn("Bed_No", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBed_No);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columninpatient_no = new DataColumn("inpatient_no", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninpatient_no);
                this.columnin_date = new DataColumn("in_date", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnin_date);
                this.columnsex = new DataColumn("sex", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsex);
                this.columninpatient_id = new DataColumn("inpatient_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninpatient_id);
                this.columnselected = new DataColumn("selected", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnselected);
                this.columnyjj = new DataColumn("yjj", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnyjj);
                this.columntotal = new DataColumn("total", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntotal);
                this.columnye = new DataColumn("ye", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnye);
                this.columnjslx = new DataColumn("jslx", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnjslx);
                this.columnbjj = new DataColumn("bjj", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbjj);
            }
            
            public tabGrdRow NewtabGrdRow() {
                return ((tabGrdRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tabGrdRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tabGrdRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tabGrdRowChanged != null)) {
                    this.tabGrdRowChanged(this, new tabGrdRowChangeEvent(((tabGrdRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tabGrdRowChanging != null)) {
                    this.tabGrdRowChanging(this, new tabGrdRowChangeEvent(((tabGrdRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tabGrdRowDeleted != null)) {
                    this.tabGrdRowDeleted(this, new tabGrdRowChangeEvent(((tabGrdRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tabGrdRowDeleting != null)) {
                    this.tabGrdRowDeleting(this, new tabGrdRowChangeEvent(((tabGrdRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetabGrdRow(tabGrdRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabGrdRow : DataRow {
            
            private tabGrdDataTable tabletabGrd;
            
            internal tabGrdRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletabGrd = ((tabGrdDataTable)(this.Table));
            }
            
            public string Bed_No {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.Bed_NoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.Bed_NoColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.nameColumn] = value;
                }
            }
            
            public string inpatient_no {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.inpatient_noColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.inpatient_noColumn] = value;
                }
            }
            
            public string in_date {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.in_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.in_dateColumn] = value;
                }
            }
            
            public string sex {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.sexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.sexColumn] = value;
                }
            }
            
            public string inpatient_id {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.inpatient_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.inpatient_idColumn] = value;
                }
            }
            
            public bool selected {
                get {
                    try {
                        return ((bool)(this[this.tabletabGrd.selectedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.selectedColumn] = value;
                }
            }
            
            public string yjj {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.yjjColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.yjjColumn] = value;
                }
            }
            
            public string total {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.totalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.totalColumn] = value;
                }
            }
            
            public string ye {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.yeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.yeColumn] = value;
                }
            }
            
            public string jslx {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.jslxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.jslxColumn] = value;
                }
            }
            
            public string bjj {
                get {
                    try {
                        return ((string)(this[this.tabletabGrd.bjjColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletabGrd.bjjColumn] = value;
                }
            }
            
            public bool IsBed_NoNull() {
                return this.IsNull(this.tabletabGrd.Bed_NoColumn);
            }
            
            public void SetBed_NoNull() {
                this[this.tabletabGrd.Bed_NoColumn] = System.Convert.DBNull;
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tabletabGrd.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tabletabGrd.nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isinpatient_noNull() {
                return this.IsNull(this.tabletabGrd.inpatient_noColumn);
            }
            
            public void Setinpatient_noNull() {
                this[this.tabletabGrd.inpatient_noColumn] = System.Convert.DBNull;
            }
            
            public bool Isin_dateNull() {
                return this.IsNull(this.tabletabGrd.in_dateColumn);
            }
            
            public void Setin_dateNull() {
                this[this.tabletabGrd.in_dateColumn] = System.Convert.DBNull;
            }
            
            public bool IssexNull() {
                return this.IsNull(this.tabletabGrd.sexColumn);
            }
            
            public void SetsexNull() {
                this[this.tabletabGrd.sexColumn] = System.Convert.DBNull;
            }
            
            public bool Isinpatient_idNull() {
                return this.IsNull(this.tabletabGrd.inpatient_idColumn);
            }
            
            public void Setinpatient_idNull() {
                this[this.tabletabGrd.inpatient_idColumn] = System.Convert.DBNull;
            }
            
            public bool IsselectedNull() {
                return this.IsNull(this.tabletabGrd.selectedColumn);
            }
            
            public void SetselectedNull() {
                this[this.tabletabGrd.selectedColumn] = System.Convert.DBNull;
            }
            
            public bool IsyjjNull() {
                return this.IsNull(this.tabletabGrd.yjjColumn);
            }
            
            public void SetyjjNull() {
                this[this.tabletabGrd.yjjColumn] = System.Convert.DBNull;
            }
            
            public bool IstotalNull() {
                return this.IsNull(this.tabletabGrd.totalColumn);
            }
            
            public void SettotalNull() {
                this[this.tabletabGrd.totalColumn] = System.Convert.DBNull;
            }
            
            public bool IsyeNull() {
                return this.IsNull(this.tabletabGrd.yeColumn);
            }
            
            public void SetyeNull() {
                this[this.tabletabGrd.yeColumn] = System.Convert.DBNull;
            }
            
            public bool IsjslxNull() {
                return this.IsNull(this.tabletabGrd.jslxColumn);
            }
            
            public void SetjslxNull() {
                this[this.tabletabGrd.jslxColumn] = System.Convert.DBNull;
            }
            
            public bool IsbjjNull() {
                return this.IsNull(this.tabletabGrd.bjjColumn);
            }
            
            public void SetbjjNull() {
                this[this.tabletabGrd.bjjColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tabGrdRowChangeEvent : EventArgs {
            
            private tabGrdRow eventRow;
            
            private DataRowAction eventAction;
            
            public tabGrdRowChangeEvent(tabGrdRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tabGrdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
