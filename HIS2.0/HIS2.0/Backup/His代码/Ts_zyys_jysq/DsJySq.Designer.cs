//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5477
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Ts_zyys_jysq {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DsJySq")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DsJySq : global::System.Data.DataSet {
        
        private rptAPPDataTable tablerptAPP;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DsJySq() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DsJySq(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["rptAPP"] != null)) {
                    base.Tables.Add(new rptAPPDataTable(ds.Tables["rptAPP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptAPPDataTable rptAPP {
            get {
                return this.tablerptAPP;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DsJySq cln = ((DsJySq)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["rptAPP"] != null)) {
                    base.Tables.Add(new rptAPPDataTable(ds.Tables["rptAPP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablerptAPP = ((rptAPPDataTable)(base.Tables["rptAPP"]));
            if ((initTable == true)) {
                if ((this.tablerptAPP != null)) {
                    this.tablerptAPP.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DsJySq";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DsJySq.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablerptAPP = new rptAPPDataTable();
            base.Tables.Add(this.tablerptAPP);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptAPP() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DsJySq ds = new DsJySq();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void rptAPPRowChangeEventHandler(object sender, rptAPPRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptAPPDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnbinname;
            
            private global::System.Data.DataColumn columnsex;
            
            private global::System.Data.DataColumn columnage;
            
            private global::System.Data.DataColumn columnyqDoc;
            
            private global::System.Data.DataColumn columnyqDate;
            
            private global::System.Data.DataColumn columndeptName;
            
            private global::System.Data.DataColumn columnwardName;
            
            private global::System.Data.DataColumn columnbedID;
            
            private global::System.Data.DataColumn columnsymptom;
            
            private global::System.Data.DataColumn columndiagnosis;
            
            private global::System.Data.DataColumn columnplace;
            
            private global::System.Data.DataColumn columnitemName;
            
            private global::System.Data.DataColumn columninpatientid;
            
            private global::System.Data.DataColumn columnprice;
            
            private global::System.Data.DataColumn columnbz;
            
            private global::System.Data.DataColumn columncol1;
            
            private global::System.Data.DataColumn columncol2;
            
            private global::System.Data.DataColumn columncol3;
            
            private global::System.Data.DataColumn columncol4;
            
            private global::System.Data.DataColumn columncol5;
            
            private global::System.Data.DataColumn columncol6;
            
            private global::System.Data.DataColumn columnyymc;
            
            private global::System.Data.DataColumn columnlxmc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAPPDataTable() {
                this.TableName = "rptAPP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptAPPDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptAPPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn binnameColumn {
                get {
                    return this.columnbinname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ageColumn {
                get {
                    return this.columnage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yqDocColumn {
                get {
                    return this.columnyqDoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yqDateColumn {
                get {
                    return this.columnyqDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn deptNameColumn {
                get {
                    return this.columndeptName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn wardNameColumn {
                get {
                    return this.columnwardName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bedIDColumn {
                get {
                    return this.columnbedID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn symptomColumn {
                get {
                    return this.columnsymptom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diagnosisColumn {
                get {
                    return this.columndiagnosis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn placeColumn {
                get {
                    return this.columnplace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn itemNameColumn {
                get {
                    return this.columnitemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inpatientidColumn {
                get {
                    return this.columninpatientid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bzColumn {
                get {
                    return this.columnbz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn col1Column {
                get {
                    return this.columncol1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn col2Column {
                get {
                    return this.columncol2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn col3Column {
                get {
                    return this.columncol3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn col4Column {
                get {
                    return this.columncol4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn col5Column {
                get {
                    return this.columncol5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn col6Column {
                get {
                    return this.columncol6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yymcColumn {
                get {
                    return this.columnyymc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lxmcColumn {
                get {
                    return this.columnlxmc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAPPRow this[int index] {
                get {
                    return ((rptAPPRow)(this.Rows[index]));
                }
            }
            
            public event rptAPPRowChangeEventHandler rptAPPRowChanging;
            
            public event rptAPPRowChangeEventHandler rptAPPRowChanged;
            
            public event rptAPPRowChangeEventHandler rptAPPRowDeleting;
            
            public event rptAPPRowChangeEventHandler rptAPPRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptAPPRow(rptAPPRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAPPRow AddrptAPPRow(
                        string binname, 
                        string sex, 
                        string age, 
                        string yqDoc, 
                        string yqDate, 
                        string deptName, 
                        string wardName, 
                        string bedID, 
                        string symptom, 
                        string diagnosis, 
                        string place, 
                        string itemName, 
                        string inpatientid, 
                        string price, 
                        string bz, 
                        string col1, 
                        string col2, 
                        string col3, 
                        string col4, 
                        string col5, 
                        string col6, 
                        string yymc, 
                        string lxmc) {
                rptAPPRow rowrptAPPRow = ((rptAPPRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        binname,
                        sex,
                        age,
                        yqDoc,
                        yqDate,
                        deptName,
                        wardName,
                        bedID,
                        symptom,
                        diagnosis,
                        place,
                        itemName,
                        inpatientid,
                        price,
                        bz,
                        col1,
                        col2,
                        col3,
                        col4,
                        col5,
                        col6,
                        yymc,
                        lxmc};
                rowrptAPPRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptAPPRow);
                return rowrptAPPRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptAPPDataTable cln = ((rptAPPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptAPPDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbinname = base.Columns["binname"];
                this.columnsex = base.Columns["sex"];
                this.columnage = base.Columns["age"];
                this.columnyqDoc = base.Columns["yqDoc"];
                this.columnyqDate = base.Columns["yqDate"];
                this.columndeptName = base.Columns["deptName"];
                this.columnwardName = base.Columns["wardName"];
                this.columnbedID = base.Columns["bedID"];
                this.columnsymptom = base.Columns["symptom"];
                this.columndiagnosis = base.Columns["diagnosis"];
                this.columnplace = base.Columns["place"];
                this.columnitemName = base.Columns["itemName"];
                this.columninpatientid = base.Columns["inpatientid"];
                this.columnprice = base.Columns["price"];
                this.columnbz = base.Columns["bz"];
                this.columncol1 = base.Columns["col1"];
                this.columncol2 = base.Columns["col2"];
                this.columncol3 = base.Columns["col3"];
                this.columncol4 = base.Columns["col4"];
                this.columncol5 = base.Columns["col5"];
                this.columncol6 = base.Columns["col6"];
                this.columnyymc = base.Columns["yymc"];
                this.columnlxmc = base.Columns["lxmc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbinname = new global::System.Data.DataColumn("binname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbinname);
                this.columnsex = new global::System.Data.DataColumn("sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsex);
                this.columnage = new global::System.Data.DataColumn("age", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnage);
                this.columnyqDoc = new global::System.Data.DataColumn("yqDoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyqDoc);
                this.columnyqDate = new global::System.Data.DataColumn("yqDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyqDate);
                this.columndeptName = new global::System.Data.DataColumn("deptName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndeptName);
                this.columnwardName = new global::System.Data.DataColumn("wardName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwardName);
                this.columnbedID = new global::System.Data.DataColumn("bedID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbedID);
                this.columnsymptom = new global::System.Data.DataColumn("symptom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsymptom);
                this.columndiagnosis = new global::System.Data.DataColumn("diagnosis", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiagnosis);
                this.columnplace = new global::System.Data.DataColumn("place", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnplace);
                this.columnitemName = new global::System.Data.DataColumn("itemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnitemName);
                this.columninpatientid = new global::System.Data.DataColumn("inpatientid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninpatientid);
                this.columnprice = new global::System.Data.DataColumn("price", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprice);
                this.columnbz = new global::System.Data.DataColumn("bz", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbz);
                this.columncol1 = new global::System.Data.DataColumn("col1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncol1);
                this.columncol2 = new global::System.Data.DataColumn("col2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncol2);
                this.columncol3 = new global::System.Data.DataColumn("col3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncol3);
                this.columncol4 = new global::System.Data.DataColumn("col4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncol4);
                this.columncol5 = new global::System.Data.DataColumn("col5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncol5);
                this.columncol6 = new global::System.Data.DataColumn("col6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncol6);
                this.columnyymc = new global::System.Data.DataColumn("yymc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyymc);
                this.columnlxmc = new global::System.Data.DataColumn("lxmc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlxmc);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAPPRow NewrptAPPRow() {
                return ((rptAPPRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptAPPRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptAPPRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptAPPRowChanged != null)) {
                    this.rptAPPRowChanged(this, new rptAPPRowChangeEvent(((rptAPPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptAPPRowChanging != null)) {
                    this.rptAPPRowChanging(this, new rptAPPRowChangeEvent(((rptAPPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptAPPRowDeleted != null)) {
                    this.rptAPPRowDeleted(this, new rptAPPRowChangeEvent(((rptAPPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptAPPRowDeleting != null)) {
                    this.rptAPPRowDeleting(this, new rptAPPRowChangeEvent(((rptAPPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptAPPRow(rptAPPRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsJySq ds = new DsJySq();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptAPPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptAPPRow : global::System.Data.DataRow {
            
            private rptAPPDataTable tablerptAPP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptAPPRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptAPP = ((rptAPPDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string binname {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.binnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“binname”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.binnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sex {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.sexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“sex”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.sexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string age {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.ageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“age”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.ageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string yqDoc {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.yqDocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“yqDoc”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.yqDocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string yqDate {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.yqDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“yqDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.yqDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string deptName {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.deptNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“deptName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.deptNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string wardName {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.wardNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“wardName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.wardNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bedID {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.bedIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“bedID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.bedIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string symptom {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.symptomColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“symptom”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.symptomColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diagnosis {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.diagnosisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“diagnosis”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.diagnosisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string place {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.placeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“place”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.placeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string itemName {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.itemNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“itemName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.itemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inpatientid {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.inpatientidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“inpatientid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.inpatientidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string price {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.priceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“price”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bz {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.bzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“bz”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.bzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string col1 {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.col1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“col1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.col1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string col2 {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.col2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“col2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.col2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string col3 {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.col3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“col3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.col3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string col4 {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.col4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“col4”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.col4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string col5 {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.col5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“col5”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.col5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string col6 {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.col6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“col6”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.col6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string yymc {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.yymcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“yymc”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.yymcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lxmc {
                get {
                    try {
                        return ((string)(this[this.tablerptAPP.lxmcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptAPP”中列“lxmc”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptAPP.lxmcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbinnameNull() {
                return this.IsNull(this.tablerptAPP.binnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbinnameNull() {
                this[this.tablerptAPP.binnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssexNull() {
                return this.IsNull(this.tablerptAPP.sexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsexNull() {
                this[this.tablerptAPP.sexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsageNull() {
                return this.IsNull(this.tablerptAPP.ageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetageNull() {
                this[this.tablerptAPP.ageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyqDocNull() {
                return this.IsNull(this.tablerptAPP.yqDocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyqDocNull() {
                this[this.tablerptAPP.yqDocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyqDateNull() {
                return this.IsNull(this.tablerptAPP.yqDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyqDateNull() {
                this[this.tablerptAPP.yqDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeptNameNull() {
                return this.IsNull(this.tablerptAPP.deptNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeptNameNull() {
                this[this.tablerptAPP.deptNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswardNameNull() {
                return this.IsNull(this.tablerptAPP.wardNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwardNameNull() {
                this[this.tablerptAPP.wardNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbedIDNull() {
                return this.IsNull(this.tablerptAPP.bedIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbedIDNull() {
                this[this.tablerptAPP.bedIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssymptomNull() {
                return this.IsNull(this.tablerptAPP.symptomColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsymptomNull() {
                this[this.tablerptAPP.symptomColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiagnosisNull() {
                return this.IsNull(this.tablerptAPP.diagnosisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiagnosisNull() {
                this[this.tablerptAPP.diagnosisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplaceNull() {
                return this.IsNull(this.tablerptAPP.placeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplaceNull() {
                this[this.tablerptAPP.placeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsitemNameNull() {
                return this.IsNull(this.tablerptAPP.itemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetitemNameNull() {
                this[this.tablerptAPP.itemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinpatientidNull() {
                return this.IsNull(this.tablerptAPP.inpatientidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinpatientidNull() {
                this[this.tablerptAPP.inpatientidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriceNull() {
                return this.IsNull(this.tablerptAPP.priceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriceNull() {
                this[this.tablerptAPP.priceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbzNull() {
                return this.IsNull(this.tablerptAPP.bzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbzNull() {
                this[this.tablerptAPP.bzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscol1Null() {
                return this.IsNull(this.tablerptAPP.col1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcol1Null() {
                this[this.tablerptAPP.col1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscol2Null() {
                return this.IsNull(this.tablerptAPP.col2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcol2Null() {
                this[this.tablerptAPP.col2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscol3Null() {
                return this.IsNull(this.tablerptAPP.col3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcol3Null() {
                this[this.tablerptAPP.col3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscol4Null() {
                return this.IsNull(this.tablerptAPP.col4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcol4Null() {
                this[this.tablerptAPP.col4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscol5Null() {
                return this.IsNull(this.tablerptAPP.col5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcol5Null() {
                this[this.tablerptAPP.col5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscol6Null() {
                return this.IsNull(this.tablerptAPP.col6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcol6Null() {
                this[this.tablerptAPP.col6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyymcNull() {
                return this.IsNull(this.tablerptAPP.yymcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyymcNull() {
                this[this.tablerptAPP.yymcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslxmcNull() {
                return this.IsNull(this.tablerptAPP.lxmcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlxmcNull() {
                this[this.tablerptAPP.lxmcColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptAPPRowChangeEvent : global::System.EventArgs {
            
            private rptAPPRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAPPRowChangeEvent(rptAPPRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAPPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591