//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5485
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Ts_zyys_public {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RepDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RepDataSet : global::System.Data.DataSet {
        
        private rptDocIncomeDataTable tablerptDocIncome;
        
        private rptYYJCDataTable tablerptYYJC;
        
        private rptAppDataTable tablerptApp;
        
        private rptBinStatDataTable tablerptBinStat;
        
        private rptDeptStatDataTable tablerptDeptStat;
        
        private rptShiftDataTable tablerptShift;
        
        private HoitemStatDataTable tableHoitemStat;
        
        private _111DataTable table_111;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RepDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RepDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["rptDocIncome"] != null)) {
                    base.Tables.Add(new rptDocIncomeDataTable(ds.Tables["rptDocIncome"]));
                }
                if ((ds.Tables["rptYYJC"] != null)) {
                    base.Tables.Add(new rptYYJCDataTable(ds.Tables["rptYYJC"]));
                }
                if ((ds.Tables["rptApp"] != null)) {
                    base.Tables.Add(new rptAppDataTable(ds.Tables["rptApp"]));
                }
                if ((ds.Tables["rptBinStat"] != null)) {
                    base.Tables.Add(new rptBinStatDataTable(ds.Tables["rptBinStat"]));
                }
                if ((ds.Tables["rptDeptStat"] != null)) {
                    base.Tables.Add(new rptDeptStatDataTable(ds.Tables["rptDeptStat"]));
                }
                if ((ds.Tables["rptShift"] != null)) {
                    base.Tables.Add(new rptShiftDataTable(ds.Tables["rptShift"]));
                }
                if ((ds.Tables["HoitemStat"] != null)) {
                    base.Tables.Add(new HoitemStatDataTable(ds.Tables["HoitemStat"]));
                }
                if ((ds.Tables["111"] != null)) {
                    base.Tables.Add(new _111DataTable(ds.Tables["111"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptDocIncomeDataTable rptDocIncome {
            get {
                return this.tablerptDocIncome;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptYYJCDataTable rptYYJC {
            get {
                return this.tablerptYYJC;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptAppDataTable rptApp {
            get {
                return this.tablerptApp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptBinStatDataTable rptBinStat {
            get {
                return this.tablerptBinStat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptDeptStatDataTable rptDeptStat {
            get {
                return this.tablerptDeptStat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptShiftDataTable rptShift {
            get {
                return this.tablerptShift;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HoitemStatDataTable HoitemStat {
            get {
                return this.tableHoitemStat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _111DataTable _111 {
            get {
                return this.table_111;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RepDataSet cln = ((RepDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["rptDocIncome"] != null)) {
                    base.Tables.Add(new rptDocIncomeDataTable(ds.Tables["rptDocIncome"]));
                }
                if ((ds.Tables["rptYYJC"] != null)) {
                    base.Tables.Add(new rptYYJCDataTable(ds.Tables["rptYYJC"]));
                }
                if ((ds.Tables["rptApp"] != null)) {
                    base.Tables.Add(new rptAppDataTable(ds.Tables["rptApp"]));
                }
                if ((ds.Tables["rptBinStat"] != null)) {
                    base.Tables.Add(new rptBinStatDataTable(ds.Tables["rptBinStat"]));
                }
                if ((ds.Tables["rptDeptStat"] != null)) {
                    base.Tables.Add(new rptDeptStatDataTable(ds.Tables["rptDeptStat"]));
                }
                if ((ds.Tables["rptShift"] != null)) {
                    base.Tables.Add(new rptShiftDataTable(ds.Tables["rptShift"]));
                }
                if ((ds.Tables["HoitemStat"] != null)) {
                    base.Tables.Add(new HoitemStatDataTable(ds.Tables["HoitemStat"]));
                }
                if ((ds.Tables["111"] != null)) {
                    base.Tables.Add(new _111DataTable(ds.Tables["111"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablerptDocIncome = ((rptDocIncomeDataTable)(base.Tables["rptDocIncome"]));
            if ((initTable == true)) {
                if ((this.tablerptDocIncome != null)) {
                    this.tablerptDocIncome.InitVars();
                }
            }
            this.tablerptYYJC = ((rptYYJCDataTable)(base.Tables["rptYYJC"]));
            if ((initTable == true)) {
                if ((this.tablerptYYJC != null)) {
                    this.tablerptYYJC.InitVars();
                }
            }
            this.tablerptApp = ((rptAppDataTable)(base.Tables["rptApp"]));
            if ((initTable == true)) {
                if ((this.tablerptApp != null)) {
                    this.tablerptApp.InitVars();
                }
            }
            this.tablerptBinStat = ((rptBinStatDataTable)(base.Tables["rptBinStat"]));
            if ((initTable == true)) {
                if ((this.tablerptBinStat != null)) {
                    this.tablerptBinStat.InitVars();
                }
            }
            this.tablerptDeptStat = ((rptDeptStatDataTable)(base.Tables["rptDeptStat"]));
            if ((initTable == true)) {
                if ((this.tablerptDeptStat != null)) {
                    this.tablerptDeptStat.InitVars();
                }
            }
            this.tablerptShift = ((rptShiftDataTable)(base.Tables["rptShift"]));
            if ((initTable == true)) {
                if ((this.tablerptShift != null)) {
                    this.tablerptShift.InitVars();
                }
            }
            this.tableHoitemStat = ((HoitemStatDataTable)(base.Tables["HoitemStat"]));
            if ((initTable == true)) {
                if ((this.tableHoitemStat != null)) {
                    this.tableHoitemStat.InitVars();
                }
            }
            this.table_111 = ((_111DataTable)(base.Tables["111"]));
            if ((initTable == true)) {
                if ((this.table_111 != null)) {
                    this.table_111.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RepDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RepDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablerptDocIncome = new rptDocIncomeDataTable();
            base.Tables.Add(this.tablerptDocIncome);
            this.tablerptYYJC = new rptYYJCDataTable();
            base.Tables.Add(this.tablerptYYJC);
            this.tablerptApp = new rptAppDataTable();
            base.Tables.Add(this.tablerptApp);
            this.tablerptBinStat = new rptBinStatDataTable();
            base.Tables.Add(this.tablerptBinStat);
            this.tablerptDeptStat = new rptDeptStatDataTable();
            base.Tables.Add(this.tablerptDeptStat);
            this.tablerptShift = new rptShiftDataTable();
            base.Tables.Add(this.tablerptShift);
            this.tableHoitemStat = new HoitemStatDataTable();
            base.Tables.Add(this.tableHoitemStat);
            this.table_111 = new _111DataTable();
            base.Tables.Add(this.table_111);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptDocIncome() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptYYJC() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptApp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptBinStat() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptDeptStat() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptShift() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHoitemStat() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_111() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RepDataSet ds = new RepDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void rptDocIncomeRowChangeEventHandler(object sender, rptDocIncomeRowChangeEvent e);
        
        public delegate void rptYYJCRowChangeEventHandler(object sender, rptYYJCRowChangeEvent e);
        
        public delegate void rptAppRowChangeEventHandler(object sender, rptAppRowChangeEvent e);
        
        public delegate void rptBinStatRowChangeEventHandler(object sender, rptBinStatRowChangeEvent e);
        
        public delegate void rptDeptStatRowChangeEventHandler(object sender, rptDeptStatRowChangeEvent e);
        
        public delegate void rptShiftRowChangeEventHandler(object sender, rptShiftRowChangeEvent e);
        
        public delegate void HoitemStatRowChangeEventHandler(object sender, HoitemStatRowChangeEvent e);
        
        public delegate void _111RowChangeEventHandler(object sender, _111RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptDocIncomeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDOCTOR;
            
            private global::System.Data.DataColumn columnITEMNAME;
            
            private global::System.Data.DataColumn columnMZ_NUM;
            
            private global::System.Data.DataColumn columnMZ_VALUES;
            
            private global::System.Data.DataColumn columnZY_NUM;
            
            private global::System.Data.DataColumn columnZY_VALUES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDocIncomeDataTable() {
                this.TableName = "rptDocIncome";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptDocIncomeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptDocIncomeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCTORColumn {
                get {
                    return this.columnDOCTOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITEMNAMEColumn {
                get {
                    return this.columnITEMNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MZ_NUMColumn {
                get {
                    return this.columnMZ_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MZ_VALUESColumn {
                get {
                    return this.columnMZ_VALUES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZY_NUMColumn {
                get {
                    return this.columnZY_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZY_VALUESColumn {
                get {
                    return this.columnZY_VALUES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDocIncomeRow this[int index] {
                get {
                    return ((rptDocIncomeRow)(this.Rows[index]));
                }
            }
            
            public event rptDocIncomeRowChangeEventHandler rptDocIncomeRowChanging;
            
            public event rptDocIncomeRowChangeEventHandler rptDocIncomeRowChanged;
            
            public event rptDocIncomeRowChangeEventHandler rptDocIncomeRowDeleting;
            
            public event rptDocIncomeRowChangeEventHandler rptDocIncomeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptDocIncomeRow(rptDocIncomeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDocIncomeRow AddrptDocIncomeRow(string DOCTOR, string ITEMNAME, int MZ_NUM, double MZ_VALUES, int ZY_NUM, double ZY_VALUES) {
                rptDocIncomeRow rowrptDocIncomeRow = ((rptDocIncomeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DOCTOR,
                        ITEMNAME,
                        MZ_NUM,
                        MZ_VALUES,
                        ZY_NUM,
                        ZY_VALUES};
                rowrptDocIncomeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptDocIncomeRow);
                return rowrptDocIncomeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptDocIncomeDataTable cln = ((rptDocIncomeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptDocIncomeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDOCTOR = base.Columns["DOCTOR"];
                this.columnITEMNAME = base.Columns["ITEMNAME"];
                this.columnMZ_NUM = base.Columns["MZ_NUM"];
                this.columnMZ_VALUES = base.Columns["MZ_VALUES"];
                this.columnZY_NUM = base.Columns["ZY_NUM"];
                this.columnZY_VALUES = base.Columns["ZY_VALUES"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDOCTOR = new global::System.Data.DataColumn("DOCTOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCTOR);
                this.columnITEMNAME = new global::System.Data.DataColumn("ITEMNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEMNAME);
                this.columnMZ_NUM = new global::System.Data.DataColumn("MZ_NUM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMZ_NUM);
                this.columnMZ_VALUES = new global::System.Data.DataColumn("MZ_VALUES", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMZ_VALUES);
                this.columnZY_NUM = new global::System.Data.DataColumn("ZY_NUM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZY_NUM);
                this.columnZY_VALUES = new global::System.Data.DataColumn("ZY_VALUES", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZY_VALUES);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDocIncomeRow NewrptDocIncomeRow() {
                return ((rptDocIncomeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptDocIncomeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptDocIncomeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptDocIncomeRowChanged != null)) {
                    this.rptDocIncomeRowChanged(this, new rptDocIncomeRowChangeEvent(((rptDocIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptDocIncomeRowChanging != null)) {
                    this.rptDocIncomeRowChanging(this, new rptDocIncomeRowChangeEvent(((rptDocIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptDocIncomeRowDeleted != null)) {
                    this.rptDocIncomeRowDeleted(this, new rptDocIncomeRowChangeEvent(((rptDocIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptDocIncomeRowDeleting != null)) {
                    this.rptDocIncomeRowDeleting(this, new rptDocIncomeRowChangeEvent(((rptDocIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptDocIncomeRow(rptDocIncomeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepDataSet ds = new RepDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptDocIncomeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptYYJCDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnyyDate;
            
            private global::System.Data.DataColumn columnbinName;
            
            private global::System.Data.DataColumn columnsex;
            
            private global::System.Data.DataColumn columnage;
            
            private global::System.Data.DataColumn columnyyDoc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptYYJCDataTable() {
                this.TableName = "rptYYJC";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptYYJCDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptYYJCDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yyDateColumn {
                get {
                    return this.columnyyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn binNameColumn {
                get {
                    return this.columnbinName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ageColumn {
                get {
                    return this.columnage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yyDocColumn {
                get {
                    return this.columnyyDoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptYYJCRow this[int index] {
                get {
                    return ((rptYYJCRow)(this.Rows[index]));
                }
            }
            
            public event rptYYJCRowChangeEventHandler rptYYJCRowChanging;
            
            public event rptYYJCRowChangeEventHandler rptYYJCRowChanged;
            
            public event rptYYJCRowChangeEventHandler rptYYJCRowDeleting;
            
            public event rptYYJCRowChangeEventHandler rptYYJCRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptYYJCRow(rptYYJCRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptYYJCRow AddrptYYJCRow(System.DateTime yyDate, string binName, string sex, int age, string yyDoc) {
                rptYYJCRow rowrptYYJCRow = ((rptYYJCRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        yyDate,
                        binName,
                        sex,
                        age,
                        yyDoc};
                rowrptYYJCRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptYYJCRow);
                return rowrptYYJCRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptYYJCDataTable cln = ((rptYYJCDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptYYJCDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnyyDate = base.Columns["yyDate"];
                this.columnbinName = base.Columns["binName"];
                this.columnsex = base.Columns["sex"];
                this.columnage = base.Columns["age"];
                this.columnyyDoc = base.Columns["yyDoc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnyyDate = new global::System.Data.DataColumn("yyDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyyDate);
                this.columnbinName = new global::System.Data.DataColumn("binName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbinName);
                this.columnsex = new global::System.Data.DataColumn("sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsex);
                this.columnage = new global::System.Data.DataColumn("age", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnage);
                this.columnyyDoc = new global::System.Data.DataColumn("yyDoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyyDoc);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptYYJCRow NewrptYYJCRow() {
                return ((rptYYJCRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptYYJCRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptYYJCRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptYYJCRowChanged != null)) {
                    this.rptYYJCRowChanged(this, new rptYYJCRowChangeEvent(((rptYYJCRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptYYJCRowChanging != null)) {
                    this.rptYYJCRowChanging(this, new rptYYJCRowChangeEvent(((rptYYJCRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptYYJCRowDeleted != null)) {
                    this.rptYYJCRowDeleted(this, new rptYYJCRowChangeEvent(((rptYYJCRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptYYJCRowDeleting != null)) {
                    this.rptYYJCRowDeleting(this, new rptYYJCRowChangeEvent(((rptYYJCRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptYYJCRow(rptYYJCRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepDataSet ds = new RepDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptYYJCDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptAppDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnbinname;
            
            private global::System.Data.DataColumn columnsex;
            
            private global::System.Data.DataColumn columnage;
            
            private global::System.Data.DataColumn columnyqDoc;
            
            private global::System.Data.DataColumn columnyqDate;
            
            private global::System.Data.DataColumn columndeptName;
            
            private global::System.Data.DataColumn columnwardName;
            
            private global::System.Data.DataColumn columnbedID;
            
            private global::System.Data.DataColumn columnaddress;
            
            private global::System.Data.DataColumn columntele;
            
            private global::System.Data.DataColumn columnsymptom;
            
            private global::System.Data.DataColumn columndiagnosis;
            
            private global::System.Data.DataColumn columnplace;
            
            private global::System.Data.DataColumn columnitemName;
            
            private global::System.Data.DataColumn columninpatientID;
            
            private global::System.Data.DataColumn columnprice;
            
            private global::System.Data.DataColumn columnjc_no;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAppDataTable() {
                this.TableName = "rptApp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptAppDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptAppDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn binnameColumn {
                get {
                    return this.columnbinname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ageColumn {
                get {
                    return this.columnage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yqDocColumn {
                get {
                    return this.columnyqDoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yqDateColumn {
                get {
                    return this.columnyqDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn deptNameColumn {
                get {
                    return this.columndeptName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn wardNameColumn {
                get {
                    return this.columnwardName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bedIDColumn {
                get {
                    return this.columnbedID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn addressColumn {
                get {
                    return this.columnaddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn teleColumn {
                get {
                    return this.columntele;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn symptomColumn {
                get {
                    return this.columnsymptom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diagnosisColumn {
                get {
                    return this.columndiagnosis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn placeColumn {
                get {
                    return this.columnplace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn itemNameColumn {
                get {
                    return this.columnitemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inpatientIDColumn {
                get {
                    return this.columninpatientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jc_noColumn {
                get {
                    return this.columnjc_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAppRow this[int index] {
                get {
                    return ((rptAppRow)(this.Rows[index]));
                }
            }
            
            public event rptAppRowChangeEventHandler rptAppRowChanging;
            
            public event rptAppRowChangeEventHandler rptAppRowChanged;
            
            public event rptAppRowChangeEventHandler rptAppRowDeleting;
            
            public event rptAppRowChangeEventHandler rptAppRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptAppRow(rptAppRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAppRow AddrptAppRow(
                        string binname, 
                        string sex, 
                        int age, 
                        string yqDoc, 
                        System.DateTime yqDate, 
                        string deptName, 
                        string wardName, 
                        int bedID, 
                        string address, 
                        string tele, 
                        string symptom, 
                        string diagnosis, 
                        string place, 
                        string itemName, 
                        string inpatientID, 
                        string price, 
                        string jc_no) {
                rptAppRow rowrptAppRow = ((rptAppRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        binname,
                        sex,
                        age,
                        yqDoc,
                        yqDate,
                        deptName,
                        wardName,
                        bedID,
                        address,
                        tele,
                        symptom,
                        diagnosis,
                        place,
                        itemName,
                        inpatientID,
                        price,
                        jc_no};
                rowrptAppRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptAppRow);
                return rowrptAppRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptAppDataTable cln = ((rptAppDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptAppDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbinname = base.Columns["binname"];
                this.columnsex = base.Columns["sex"];
                this.columnage = base.Columns["age"];
                this.columnyqDoc = base.Columns["yqDoc"];
                this.columnyqDate = base.Columns["yqDate"];
                this.columndeptName = base.Columns["deptName"];
                this.columnwardName = base.Columns["wardName"];
                this.columnbedID = base.Columns["bedID"];
                this.columnaddress = base.Columns["address"];
                this.columntele = base.Columns["tele"];
                this.columnsymptom = base.Columns["symptom"];
                this.columndiagnosis = base.Columns["diagnosis"];
                this.columnplace = base.Columns["place"];
                this.columnitemName = base.Columns["itemName"];
                this.columninpatientID = base.Columns["inpatientID"];
                this.columnprice = base.Columns["price"];
                this.columnjc_no = base.Columns["jc_no"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbinname = new global::System.Data.DataColumn("binname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbinname);
                this.columnsex = new global::System.Data.DataColumn("sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsex);
                this.columnage = new global::System.Data.DataColumn("age", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnage);
                this.columnyqDoc = new global::System.Data.DataColumn("yqDoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyqDoc);
                this.columnyqDate = new global::System.Data.DataColumn("yqDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyqDate);
                this.columndeptName = new global::System.Data.DataColumn("deptName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndeptName);
                this.columnwardName = new global::System.Data.DataColumn("wardName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwardName);
                this.columnbedID = new global::System.Data.DataColumn("bedID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbedID);
                this.columnaddress = new global::System.Data.DataColumn("address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddress);
                this.columntele = new global::System.Data.DataColumn("tele", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntele);
                this.columnsymptom = new global::System.Data.DataColumn("symptom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsymptom);
                this.columndiagnosis = new global::System.Data.DataColumn("diagnosis", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiagnosis);
                this.columnplace = new global::System.Data.DataColumn("place", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnplace);
                this.columnitemName = new global::System.Data.DataColumn("itemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnitemName);
                this.columninpatientID = new global::System.Data.DataColumn("inpatientID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninpatientID);
                this.columnprice = new global::System.Data.DataColumn("price", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprice);
                this.columnjc_no = new global::System.Data.DataColumn("jc_no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjc_no);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAppRow NewrptAppRow() {
                return ((rptAppRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptAppRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptAppRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptAppRowChanged != null)) {
                    this.rptAppRowChanged(this, new rptAppRowChangeEvent(((rptAppRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptAppRowChanging != null)) {
                    this.rptAppRowChanging(this, new rptAppRowChangeEvent(((rptAppRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptAppRowDeleted != null)) {
                    this.rptAppRowDeleted(this, new rptAppRowChangeEvent(((rptAppRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptAppRowDeleting != null)) {
                    this.rptAppRowDeleting(this, new rptAppRowChangeEvent(((rptAppRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptAppRow(rptAppRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepDataSet ds = new RepDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptAppDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptBinStatDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column病人;
            
            private global::System.Data.DataColumn column药费比例;
            
            private global::System.Data.DataColumn column住院天数;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnBIN;
            
            private global::System.Data.DataColumn columnYS_ID;
            
            private global::System.Data.DataColumn column床位费;
            
            private global::System.Data.DataColumn column中草药;
            
            private global::System.Data.DataColumn column中成药;
            
            private global::System.Data.DataColumn column西药;
            
            private global::System.Data.DataColumn column化验费;
            
            private global::System.Data.DataColumn column治疗费;
            
            private global::System.Data.DataColumn column放射费;
            
            private global::System.Data.DataColumn column输血费;
            
            private global::System.Data.DataColumn column检查费;
            
            private global::System.Data.DataColumn column手术费;
            
            private global::System.Data.DataColumn column其他费;
            
            private global::System.Data.DataColumn column总计;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptBinStatDataTable() {
                this.TableName = "rptBinStat";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptBinStatDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptBinStatDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 病人Column {
                get {
                    return this.column病人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 药费比例Column {
                get {
                    return this.column药费比例;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 住院天数Column {
                get {
                    return this.column住院天数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BINColumn {
                get {
                    return this.columnBIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YS_IDColumn {
                get {
                    return this.columnYS_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 床位费Column {
                get {
                    return this.column床位费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 中草药Column {
                get {
                    return this.column中草药;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 中成药Column {
                get {
                    return this.column中成药;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 西药Column {
                get {
                    return this.column西药;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 化验费Column {
                get {
                    return this.column化验费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 治疗费Column {
                get {
                    return this.column治疗费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 放射费Column {
                get {
                    return this.column放射费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 输血费Column {
                get {
                    return this.column输血费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检查费Column {
                get {
                    return this.column检查费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 手术费Column {
                get {
                    return this.column手术费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 其他费Column {
                get {
                    return this.column其他费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 总计Column {
                get {
                    return this.column总计;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptBinStatRow this[int index] {
                get {
                    return ((rptBinStatRow)(this.Rows[index]));
                }
            }
            
            public event rptBinStatRowChangeEventHandler rptBinStatRowChanging;
            
            public event rptBinStatRowChangeEventHandler rptBinStatRowChanged;
            
            public event rptBinStatRowChangeEventHandler rptBinStatRowDeleting;
            
            public event rptBinStatRowChangeEventHandler rptBinStatRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptBinStatRow(rptBinStatRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptBinStatRow AddrptBinStatRow(
                        string 病人, 
                        decimal 药费比例, 
                        int 住院天数, 
                        string NAME, 
                        decimal BIN, 
                        decimal YS_ID, 
                        decimal 床位费, 
                        decimal 中草药, 
                        decimal 中成药, 
                        decimal 西药, 
                        decimal 化验费, 
                        decimal 治疗费, 
                        decimal 放射费, 
                        decimal 输血费, 
                        decimal 检查费, 
                        decimal 手术费, 
                        decimal 其他费, 
                        decimal 总计) {
                rptBinStatRow rowrptBinStatRow = ((rptBinStatRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        病人,
                        药费比例,
                        住院天数,
                        NAME,
                        BIN,
                        YS_ID,
                        床位费,
                        中草药,
                        中成药,
                        西药,
                        化验费,
                        治疗费,
                        放射费,
                        输血费,
                        检查费,
                        手术费,
                        其他费,
                        总计};
                rowrptBinStatRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptBinStatRow);
                return rowrptBinStatRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptBinStatDataTable cln = ((rptBinStatDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptBinStatDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column病人 = base.Columns["病人"];
                this.column药费比例 = base.Columns["药费比例"];
                this.column住院天数 = base.Columns["住院天数"];
                this.columnNAME = base.Columns["NAME"];
                this.columnBIN = base.Columns["BIN"];
                this.columnYS_ID = base.Columns["YS_ID"];
                this.column床位费 = base.Columns["床位费"];
                this.column中草药 = base.Columns["中草药"];
                this.column中成药 = base.Columns["中成药"];
                this.column西药 = base.Columns["西药"];
                this.column化验费 = base.Columns["化验费"];
                this.column治疗费 = base.Columns["治疗费"];
                this.column放射费 = base.Columns["放射费"];
                this.column输血费 = base.Columns["输血费"];
                this.column检查费 = base.Columns["检查费"];
                this.column手术费 = base.Columns["手术费"];
                this.column其他费 = base.Columns["其他费"];
                this.column总计 = base.Columns["总计"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column病人 = new global::System.Data.DataColumn("病人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column病人);
                this.column药费比例 = new global::System.Data.DataColumn("药费比例", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column药费比例);
                this.column住院天数 = new global::System.Data.DataColumn("住院天数", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column住院天数);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnBIN = new global::System.Data.DataColumn("BIN", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBIN);
                this.columnYS_ID = new global::System.Data.DataColumn("YS_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYS_ID);
                this.column床位费 = new global::System.Data.DataColumn("床位费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column床位费);
                this.column中草药 = new global::System.Data.DataColumn("中草药", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column中草药);
                this.column中成药 = new global::System.Data.DataColumn("中成药", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column中成药);
                this.column西药 = new global::System.Data.DataColumn("西药", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column西药);
                this.column化验费 = new global::System.Data.DataColumn("化验费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column化验费);
                this.column治疗费 = new global::System.Data.DataColumn("治疗费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column治疗费);
                this.column放射费 = new global::System.Data.DataColumn("放射费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column放射费);
                this.column输血费 = new global::System.Data.DataColumn("输血费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column输血费);
                this.column检查费 = new global::System.Data.DataColumn("检查费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检查费);
                this.column手术费 = new global::System.Data.DataColumn("手术费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column手术费);
                this.column其他费 = new global::System.Data.DataColumn("其他费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column其他费);
                this.column总计 = new global::System.Data.DataColumn("总计", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column总计);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptBinStatRow NewrptBinStatRow() {
                return ((rptBinStatRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptBinStatRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptBinStatRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptBinStatRowChanged != null)) {
                    this.rptBinStatRowChanged(this, new rptBinStatRowChangeEvent(((rptBinStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptBinStatRowChanging != null)) {
                    this.rptBinStatRowChanging(this, new rptBinStatRowChangeEvent(((rptBinStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptBinStatRowDeleted != null)) {
                    this.rptBinStatRowDeleted(this, new rptBinStatRowChangeEvent(((rptBinStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptBinStatRowDeleting != null)) {
                    this.rptBinStatRowDeleting(this, new rptBinStatRowChangeEvent(((rptBinStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptBinStatRow(rptBinStatRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepDataSet ds = new RepDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptBinStatDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptDeptStatDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column病人;
            
            private global::System.Data.DataColumn column药费比例;
            
            private global::System.Data.DataColumn column姓名;
            
            private global::System.Data.DataColumn columninpatient_id;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn column床位费;
            
            private global::System.Data.DataColumn column药品费;
            
            private global::System.Data.DataColumn column化验费;
            
            private global::System.Data.DataColumn column治疗费;
            
            private global::System.Data.DataColumn column放射费;
            
            private global::System.Data.DataColumn column输血费;
            
            private global::System.Data.DataColumn column检查费;
            
            private global::System.Data.DataColumn column手术费;
            
            private global::System.Data.DataColumn column其他费;
            
            private global::System.Data.DataColumn column总计;
            
            private global::System.Data.DataColumn column西药;
            
            private global::System.Data.DataColumn column中成药;
            
            private global::System.Data.DataColumn column中草药;
            
            private global::System.Data.DataColumn column自制药;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDeptStatDataTable() {
                this.TableName = "rptDeptStat";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptDeptStatDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptDeptStatDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 病人Column {
                get {
                    return this.column病人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 药费比例Column {
                get {
                    return this.column药费比例;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 姓名Column {
                get {
                    return this.column姓名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inpatient_idColumn {
                get {
                    return this.columninpatient_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 床位费Column {
                get {
                    return this.column床位费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 药品费Column {
                get {
                    return this.column药品费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 化验费Column {
                get {
                    return this.column化验费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 治疗费Column {
                get {
                    return this.column治疗费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 放射费Column {
                get {
                    return this.column放射费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 输血费Column {
                get {
                    return this.column输血费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检查费Column {
                get {
                    return this.column检查费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 手术费Column {
                get {
                    return this.column手术费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 其他费Column {
                get {
                    return this.column其他费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 总计Column {
                get {
                    return this.column总计;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 西药Column {
                get {
                    return this.column西药;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 中成药Column {
                get {
                    return this.column中成药;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 中草药Column {
                get {
                    return this.column中草药;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 自制药Column {
                get {
                    return this.column自制药;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDeptStatRow this[int index] {
                get {
                    return ((rptDeptStatRow)(this.Rows[index]));
                }
            }
            
            public event rptDeptStatRowChangeEventHandler rptDeptStatRowChanging;
            
            public event rptDeptStatRowChangeEventHandler rptDeptStatRowChanged;
            
            public event rptDeptStatRowChangeEventHandler rptDeptStatRowDeleting;
            
            public event rptDeptStatRowChangeEventHandler rptDeptStatRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptDeptStatRow(rptDeptStatRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDeptStatRow AddrptDeptStatRow(
                        string 病人, 
                        decimal 药费比例, 
                        string 姓名, 
                        decimal inpatient_id, 
                        decimal ID, 
                        decimal 床位费, 
                        decimal 药品费, 
                        decimal 化验费, 
                        decimal 治疗费, 
                        decimal 放射费, 
                        decimal 输血费, 
                        decimal 检查费, 
                        decimal 手术费, 
                        decimal 其他费, 
                        decimal 总计, 
                        decimal 西药, 
                        decimal 中成药, 
                        decimal 中草药, 
                        decimal 自制药) {
                rptDeptStatRow rowrptDeptStatRow = ((rptDeptStatRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        病人,
                        药费比例,
                        姓名,
                        inpatient_id,
                        ID,
                        床位费,
                        药品费,
                        化验费,
                        治疗费,
                        放射费,
                        输血费,
                        检查费,
                        手术费,
                        其他费,
                        总计,
                        西药,
                        中成药,
                        中草药,
                        自制药};
                rowrptDeptStatRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptDeptStatRow);
                return rowrptDeptStatRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptDeptStatDataTable cln = ((rptDeptStatDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptDeptStatDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column病人 = base.Columns["病人"];
                this.column药费比例 = base.Columns["药费比例"];
                this.column姓名 = base.Columns["姓名"];
                this.columninpatient_id = base.Columns["inpatient_id"];
                this.columnID = base.Columns["ID"];
                this.column床位费 = base.Columns["床位费"];
                this.column药品费 = base.Columns["药品费"];
                this.column化验费 = base.Columns["化验费"];
                this.column治疗费 = base.Columns["治疗费"];
                this.column放射费 = base.Columns["放射费"];
                this.column输血费 = base.Columns["输血费"];
                this.column检查费 = base.Columns["检查费"];
                this.column手术费 = base.Columns["手术费"];
                this.column其他费 = base.Columns["其他费"];
                this.column总计 = base.Columns["总计"];
                this.column西药 = base.Columns["西药"];
                this.column中成药 = base.Columns["中成药"];
                this.column中草药 = base.Columns["中草药"];
                this.column自制药 = base.Columns["自制药"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column病人 = new global::System.Data.DataColumn("病人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column病人);
                this.column药费比例 = new global::System.Data.DataColumn("药费比例", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column药费比例);
                this.column姓名 = new global::System.Data.DataColumn("姓名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column姓名);
                this.columninpatient_id = new global::System.Data.DataColumn("inpatient_id", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninpatient_id);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.column床位费 = new global::System.Data.DataColumn("床位费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column床位费);
                this.column药品费 = new global::System.Data.DataColumn("药品费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column药品费);
                this.column化验费 = new global::System.Data.DataColumn("化验费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column化验费);
                this.column治疗费 = new global::System.Data.DataColumn("治疗费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column治疗费);
                this.column放射费 = new global::System.Data.DataColumn("放射费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column放射费);
                this.column输血费 = new global::System.Data.DataColumn("输血费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column输血费);
                this.column检查费 = new global::System.Data.DataColumn("检查费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检查费);
                this.column手术费 = new global::System.Data.DataColumn("手术费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column手术费);
                this.column其他费 = new global::System.Data.DataColumn("其他费", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column其他费);
                this.column总计 = new global::System.Data.DataColumn("总计", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column总计);
                this.column西药 = new global::System.Data.DataColumn("西药", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column西药);
                this.column中成药 = new global::System.Data.DataColumn("中成药", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column中成药);
                this.column中草药 = new global::System.Data.DataColumn("中草药", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column中草药);
                this.column自制药 = new global::System.Data.DataColumn("自制药", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column自制药);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDeptStatRow NewrptDeptStatRow() {
                return ((rptDeptStatRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptDeptStatRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptDeptStatRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptDeptStatRowChanged != null)) {
                    this.rptDeptStatRowChanged(this, new rptDeptStatRowChangeEvent(((rptDeptStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptDeptStatRowChanging != null)) {
                    this.rptDeptStatRowChanging(this, new rptDeptStatRowChangeEvent(((rptDeptStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptDeptStatRowDeleted != null)) {
                    this.rptDeptStatRowDeleted(this, new rptDeptStatRowChangeEvent(((rptDeptStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptDeptStatRowDeleting != null)) {
                    this.rptDeptStatRowDeleting(this, new rptDeptStatRowChangeEvent(((rptDeptStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptDeptStatRow(rptDeptStatRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepDataSet ds = new RepDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptDeptStatDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptShiftDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column姓名;
            
            private global::System.Data.DataColumn column星期一;
            
            private global::System.Data.DataColumn column星期二;
            
            private global::System.Data.DataColumn column星期三;
            
            private global::System.Data.DataColumn column星期四;
            
            private global::System.Data.DataColumn column星期五;
            
            private global::System.Data.DataColumn column星期六;
            
            private global::System.Data.DataColumn column星期日;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptShiftDataTable() {
                this.TableName = "rptShift";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptShiftDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptShiftDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 姓名Column {
                get {
                    return this.column姓名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 星期一Column {
                get {
                    return this.column星期一;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 星期二Column {
                get {
                    return this.column星期二;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 星期三Column {
                get {
                    return this.column星期三;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 星期四Column {
                get {
                    return this.column星期四;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 星期五Column {
                get {
                    return this.column星期五;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 星期六Column {
                get {
                    return this.column星期六;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 星期日Column {
                get {
                    return this.column星期日;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptShiftRow this[int index] {
                get {
                    return ((rptShiftRow)(this.Rows[index]));
                }
            }
            
            public event rptShiftRowChangeEventHandler rptShiftRowChanging;
            
            public event rptShiftRowChangeEventHandler rptShiftRowChanged;
            
            public event rptShiftRowChangeEventHandler rptShiftRowDeleting;
            
            public event rptShiftRowChangeEventHandler rptShiftRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptShiftRow(rptShiftRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptShiftRow AddrptShiftRow(string 姓名, string 星期一, string 星期二, string 星期三, string 星期四, string 星期五, string 星期六, string 星期日) {
                rptShiftRow rowrptShiftRow = ((rptShiftRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        姓名,
                        星期一,
                        星期二,
                        星期三,
                        星期四,
                        星期五,
                        星期六,
                        星期日};
                rowrptShiftRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptShiftRow);
                return rowrptShiftRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptShiftDataTable cln = ((rptShiftDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptShiftDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column姓名 = base.Columns["姓名"];
                this.column星期一 = base.Columns["星期一"];
                this.column星期二 = base.Columns["星期二"];
                this.column星期三 = base.Columns["星期三"];
                this.column星期四 = base.Columns["星期四"];
                this.column星期五 = base.Columns["星期五"];
                this.column星期六 = base.Columns["星期六"];
                this.column星期日 = base.Columns["星期日"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column姓名 = new global::System.Data.DataColumn("姓名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column姓名);
                this.column星期一 = new global::System.Data.DataColumn("星期一", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column星期一);
                this.column星期二 = new global::System.Data.DataColumn("星期二", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column星期二);
                this.column星期三 = new global::System.Data.DataColumn("星期三", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column星期三);
                this.column星期四 = new global::System.Data.DataColumn("星期四", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column星期四);
                this.column星期五 = new global::System.Data.DataColumn("星期五", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column星期五);
                this.column星期六 = new global::System.Data.DataColumn("星期六", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column星期六);
                this.column星期日 = new global::System.Data.DataColumn("星期日", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column星期日);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptShiftRow NewrptShiftRow() {
                return ((rptShiftRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptShiftRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptShiftRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptShiftRowChanged != null)) {
                    this.rptShiftRowChanged(this, new rptShiftRowChangeEvent(((rptShiftRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptShiftRowChanging != null)) {
                    this.rptShiftRowChanging(this, new rptShiftRowChangeEvent(((rptShiftRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptShiftRowDeleted != null)) {
                    this.rptShiftRowDeleted(this, new rptShiftRowChangeEvent(((rptShiftRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptShiftRowDeleting != null)) {
                    this.rptShiftRowDeleting(this, new rptShiftRowChangeEvent(((rptShiftRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptShiftRow(rptShiftRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepDataSet ds = new RepDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptShiftDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HoitemStatDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnPRICE;
            
            private global::System.Data.DataColumn columnCS;
            
            private global::System.Data.DataColumn columnORDER_DOC;
            
            private global::System.Data.DataColumn columnDOC_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoitemStatDataTable() {
                this.TableName = "HoitemStat";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HoitemStatDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HoitemStatDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRICEColumn {
                get {
                    return this.columnPRICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CSColumn {
                get {
                    return this.columnCS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDER_DOCColumn {
                get {
                    return this.columnORDER_DOC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_NAMEColumn {
                get {
                    return this.columnDOC_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoitemStatRow this[int index] {
                get {
                    return ((HoitemStatRow)(this.Rows[index]));
                }
            }
            
            public event HoitemStatRowChangeEventHandler HoitemStatRowChanging;
            
            public event HoitemStatRowChangeEventHandler HoitemStatRowChanged;
            
            public event HoitemStatRowChangeEventHandler HoitemStatRowDeleting;
            
            public event HoitemStatRowChangeEventHandler HoitemStatRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHoitemStatRow(HoitemStatRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoitemStatRow AddHoitemStatRow(string ID, string NAME, string PRICE, string CS, string ORDER_DOC, string DOC_NAME) {
                HoitemStatRow rowHoitemStatRow = ((HoitemStatRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        NAME,
                        PRICE,
                        CS,
                        ORDER_DOC,
                        DOC_NAME};
                rowHoitemStatRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHoitemStatRow);
                return rowHoitemStatRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HoitemStatDataTable cln = ((HoitemStatDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HoitemStatDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnPRICE = base.Columns["PRICE"];
                this.columnCS = base.Columns["CS"];
                this.columnORDER_DOC = base.Columns["ORDER_DOC"];
                this.columnDOC_NAME = base.Columns["DOC_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnPRICE = new global::System.Data.DataColumn("PRICE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE);
                this.columnCS = new global::System.Data.DataColumn("CS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCS);
                this.columnORDER_DOC = new global::System.Data.DataColumn("ORDER_DOC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDER_DOC);
                this.columnDOC_NAME = new global::System.Data.DataColumn("DOC_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_NAME);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoitemStatRow NewHoitemStatRow() {
                return ((HoitemStatRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HoitemStatRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HoitemStatRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HoitemStatRowChanged != null)) {
                    this.HoitemStatRowChanged(this, new HoitemStatRowChangeEvent(((HoitemStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HoitemStatRowChanging != null)) {
                    this.HoitemStatRowChanging(this, new HoitemStatRowChangeEvent(((HoitemStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HoitemStatRowDeleted != null)) {
                    this.HoitemStatRowDeleted(this, new HoitemStatRowChangeEvent(((HoitemStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HoitemStatRowDeleting != null)) {
                    this.HoitemStatRowDeleting(this, new HoitemStatRowChangeEvent(((HoitemStatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHoitemStatRow(HoitemStatRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepDataSet ds = new RepDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HoitemStatDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _111DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columna;
            
            private global::System.Data.DataColumn columnb;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _111DataTable() {
                this.TableName = "111";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _111DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _111DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn aColumn {
                get {
                    return this.columna;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bColumn {
                get {
                    return this.columnb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _111Row this[int index] {
                get {
                    return ((_111Row)(this.Rows[index]));
                }
            }
            
            public event _111RowChangeEventHandler _111RowChanging;
            
            public event _111RowChangeEventHandler _111RowChanged;
            
            public event _111RowChangeEventHandler _111RowDeleting;
            
            public event _111RowChangeEventHandler _111RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_111Row(_111Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _111Row Add_111Row(string a, string b) {
                _111Row row_111Row = ((_111Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        a,
                        b};
                row_111Row.ItemArray = columnValuesArray;
                this.Rows.Add(row_111Row);
                return row_111Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _111DataTable cln = ((_111DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _111DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columna = base.Columns["a"];
                this.columnb = base.Columns["b"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columna = new global::System.Data.DataColumn("a", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columna);
                this.columnb = new global::System.Data.DataColumn("b", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnb);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _111Row New_111Row() {
                return ((_111Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _111Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_111Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._111RowChanged != null)) {
                    this._111RowChanged(this, new _111RowChangeEvent(((_111Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._111RowChanging != null)) {
                    this._111RowChanging(this, new _111RowChangeEvent(((_111Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._111RowDeleted != null)) {
                    this._111RowDeleted(this, new _111RowChangeEvent(((_111Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._111RowDeleting != null)) {
                    this._111RowDeleting(this, new _111RowChangeEvent(((_111Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_111Row(_111Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepDataSet ds = new RepDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_111DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptDocIncomeRow : global::System.Data.DataRow {
            
            private rptDocIncomeDataTable tablerptDocIncome;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptDocIncomeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptDocIncome = ((rptDocIncomeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCTOR {
                get {
                    try {
                        return ((string)(this[this.tablerptDocIncome.DOCTORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDocIncome”中列“DOCTOR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDocIncome.DOCTORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ITEMNAME {
                get {
                    try {
                        return ((string)(this[this.tablerptDocIncome.ITEMNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDocIncome”中列“ITEMNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDocIncome.ITEMNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MZ_NUM {
                get {
                    try {
                        return ((int)(this[this.tablerptDocIncome.MZ_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDocIncome”中列“MZ_NUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDocIncome.MZ_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MZ_VALUES {
                get {
                    try {
                        return ((double)(this[this.tablerptDocIncome.MZ_VALUESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDocIncome”中列“MZ_VALUES”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDocIncome.MZ_VALUESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZY_NUM {
                get {
                    try {
                        return ((int)(this[this.tablerptDocIncome.ZY_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDocIncome”中列“ZY_NUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDocIncome.ZY_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ZY_VALUES {
                get {
                    try {
                        return ((double)(this[this.tablerptDocIncome.ZY_VALUESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDocIncome”中列“ZY_VALUES”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDocIncome.ZY_VALUESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCTORNull() {
                return this.IsNull(this.tablerptDocIncome.DOCTORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCTORNull() {
                this[this.tablerptDocIncome.DOCTORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsITEMNAMENull() {
                return this.IsNull(this.tablerptDocIncome.ITEMNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetITEMNAMENull() {
                this[this.tablerptDocIncome.ITEMNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMZ_NUMNull() {
                return this.IsNull(this.tablerptDocIncome.MZ_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMZ_NUMNull() {
                this[this.tablerptDocIncome.MZ_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMZ_VALUESNull() {
                return this.IsNull(this.tablerptDocIncome.MZ_VALUESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMZ_VALUESNull() {
                this[this.tablerptDocIncome.MZ_VALUESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZY_NUMNull() {
                return this.IsNull(this.tablerptDocIncome.ZY_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZY_NUMNull() {
                this[this.tablerptDocIncome.ZY_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZY_VALUESNull() {
                return this.IsNull(this.tablerptDocIncome.ZY_VALUESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZY_VALUESNull() {
                this[this.tablerptDocIncome.ZY_VALUESColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptYYJCRow : global::System.Data.DataRow {
            
            private rptYYJCDataTable tablerptYYJC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptYYJCRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptYYJC = ((rptYYJCDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime yyDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablerptYYJC.yyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptYYJC”中列“yyDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptYYJC.yyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string binName {
                get {
                    try {
                        return ((string)(this[this.tablerptYYJC.binNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptYYJC”中列“binName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptYYJC.binNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sex {
                get {
                    try {
                        return ((string)(this[this.tablerptYYJC.sexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptYYJC”中列“sex”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptYYJC.sexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int age {
                get {
                    try {
                        return ((int)(this[this.tablerptYYJC.ageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptYYJC”中列“age”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptYYJC.ageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string yyDoc {
                get {
                    try {
                        return ((string)(this[this.tablerptYYJC.yyDocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptYYJC”中列“yyDoc”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptYYJC.yyDocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyyDateNull() {
                return this.IsNull(this.tablerptYYJC.yyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyyDateNull() {
                this[this.tablerptYYJC.yyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbinNameNull() {
                return this.IsNull(this.tablerptYYJC.binNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbinNameNull() {
                this[this.tablerptYYJC.binNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssexNull() {
                return this.IsNull(this.tablerptYYJC.sexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsexNull() {
                this[this.tablerptYYJC.sexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsageNull() {
                return this.IsNull(this.tablerptYYJC.ageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetageNull() {
                this[this.tablerptYYJC.ageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyyDocNull() {
                return this.IsNull(this.tablerptYYJC.yyDocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyyDocNull() {
                this[this.tablerptYYJC.yyDocColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptAppRow : global::System.Data.DataRow {
            
            private rptAppDataTable tablerptApp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptAppRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptApp = ((rptAppDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string binname {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.binnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“binname”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.binnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sex {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.sexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“sex”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.sexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int age {
                get {
                    try {
                        return ((int)(this[this.tablerptApp.ageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“age”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.ageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string yqDoc {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.yqDocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“yqDoc”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.yqDocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime yqDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablerptApp.yqDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“yqDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.yqDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string deptName {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.deptNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“deptName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.deptNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string wardName {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.wardNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“wardName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.wardNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bedID {
                get {
                    try {
                        return ((int)(this[this.tablerptApp.bedIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“bedID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.bedIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string address {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.addressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“address”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.addressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tele {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.teleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“tele”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.teleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string symptom {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.symptomColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“symptom”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.symptomColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diagnosis {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.diagnosisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“diagnosis”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.diagnosisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string place {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.placeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“place”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.placeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string itemName {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.itemNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“itemName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.itemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inpatientID {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.inpatientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“inpatientID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.inpatientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string price {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.priceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“price”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jc_no {
                get {
                    try {
                        return ((string)(this[this.tablerptApp.jc_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptApp”中列“jc_no”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptApp.jc_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbinnameNull() {
                return this.IsNull(this.tablerptApp.binnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbinnameNull() {
                this[this.tablerptApp.binnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssexNull() {
                return this.IsNull(this.tablerptApp.sexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsexNull() {
                this[this.tablerptApp.sexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsageNull() {
                return this.IsNull(this.tablerptApp.ageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetageNull() {
                this[this.tablerptApp.ageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyqDocNull() {
                return this.IsNull(this.tablerptApp.yqDocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyqDocNull() {
                this[this.tablerptApp.yqDocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyqDateNull() {
                return this.IsNull(this.tablerptApp.yqDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyqDateNull() {
                this[this.tablerptApp.yqDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeptNameNull() {
                return this.IsNull(this.tablerptApp.deptNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeptNameNull() {
                this[this.tablerptApp.deptNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswardNameNull() {
                return this.IsNull(this.tablerptApp.wardNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwardNameNull() {
                this[this.tablerptApp.wardNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbedIDNull() {
                return this.IsNull(this.tablerptApp.bedIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbedIDNull() {
                this[this.tablerptApp.bedIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaddressNull() {
                return this.IsNull(this.tablerptApp.addressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaddressNull() {
                this[this.tablerptApp.addressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsteleNull() {
                return this.IsNull(this.tablerptApp.teleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetteleNull() {
                this[this.tablerptApp.teleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssymptomNull() {
                return this.IsNull(this.tablerptApp.symptomColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsymptomNull() {
                this[this.tablerptApp.symptomColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiagnosisNull() {
                return this.IsNull(this.tablerptApp.diagnosisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiagnosisNull() {
                this[this.tablerptApp.diagnosisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplaceNull() {
                return this.IsNull(this.tablerptApp.placeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplaceNull() {
                this[this.tablerptApp.placeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsitemNameNull() {
                return this.IsNull(this.tablerptApp.itemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetitemNameNull() {
                this[this.tablerptApp.itemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinpatientIDNull() {
                return this.IsNull(this.tablerptApp.inpatientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinpatientIDNull() {
                this[this.tablerptApp.inpatientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriceNull() {
                return this.IsNull(this.tablerptApp.priceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriceNull() {
                this[this.tablerptApp.priceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isjc_noNull() {
                return this.IsNull(this.tablerptApp.jc_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setjc_noNull() {
                this[this.tablerptApp.jc_noColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptBinStatRow : global::System.Data.DataRow {
            
            private rptBinStatDataTable tablerptBinStat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptBinStatRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptBinStat = ((rptBinStatDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病人 {
                get {
                    try {
                        return ((string)(this[this.tablerptBinStat.病人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“病人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.病人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 药费比例 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.药费比例Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“药费比例”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.药费比例Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 住院天数 {
                get {
                    try {
                        return ((int)(this[this.tablerptBinStat.住院天数Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“住院天数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.住院天数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tablerptBinStat.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BIN {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.BINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“BIN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.BINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal YS_ID {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.YS_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“YS_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.YS_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 床位费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.床位费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“床位费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.床位费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 中草药 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.中草药Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“中草药”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.中草药Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 中成药 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.中成药Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“中成药”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.中成药Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 西药 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.西药Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“西药”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.西药Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 化验费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.化验费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“化验费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.化验费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 治疗费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.治疗费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“治疗费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.治疗费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 放射费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.放射费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“放射费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.放射费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 输血费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.输血费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“输血费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.输血费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 检查费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.检查费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“检查费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.检查费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 手术费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.手术费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“手术费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.手术费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 其他费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.其他费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“其他费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.其他费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 总计 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptBinStat.总计Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptBinStat”中列“总计”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptBinStat.总计Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病人Null() {
                return this.IsNull(this.tablerptBinStat.病人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病人Null() {
                this[this.tablerptBinStat.病人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is药费比例Null() {
                return this.IsNull(this.tablerptBinStat.药费比例Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set药费比例Null() {
                this[this.tablerptBinStat.药费比例Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is住院天数Null() {
                return this.IsNull(this.tablerptBinStat.住院天数Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set住院天数Null() {
                this[this.tablerptBinStat.住院天数Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tablerptBinStat.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tablerptBinStat.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBINNull() {
                return this.IsNull(this.tablerptBinStat.BINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBINNull() {
                this[this.tablerptBinStat.BINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYS_IDNull() {
                return this.IsNull(this.tablerptBinStat.YS_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYS_IDNull() {
                this[this.tablerptBinStat.YS_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is床位费Null() {
                return this.IsNull(this.tablerptBinStat.床位费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set床位费Null() {
                this[this.tablerptBinStat.床位费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is中草药Null() {
                return this.IsNull(this.tablerptBinStat.中草药Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set中草药Null() {
                this[this.tablerptBinStat.中草药Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is中成药Null() {
                return this.IsNull(this.tablerptBinStat.中成药Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set中成药Null() {
                this[this.tablerptBinStat.中成药Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is西药Null() {
                return this.IsNull(this.tablerptBinStat.西药Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set西药Null() {
                this[this.tablerptBinStat.西药Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is化验费Null() {
                return this.IsNull(this.tablerptBinStat.化验费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set化验费Null() {
                this[this.tablerptBinStat.化验费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is治疗费Null() {
                return this.IsNull(this.tablerptBinStat.治疗费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set治疗费Null() {
                this[this.tablerptBinStat.治疗费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is放射费Null() {
                return this.IsNull(this.tablerptBinStat.放射费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set放射费Null() {
                this[this.tablerptBinStat.放射费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is输血费Null() {
                return this.IsNull(this.tablerptBinStat.输血费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set输血费Null() {
                this[this.tablerptBinStat.输血费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is检查费Null() {
                return this.IsNull(this.tablerptBinStat.检查费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set检查费Null() {
                this[this.tablerptBinStat.检查费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is手术费Null() {
                return this.IsNull(this.tablerptBinStat.手术费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set手术费Null() {
                this[this.tablerptBinStat.手术费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is其他费Null() {
                return this.IsNull(this.tablerptBinStat.其他费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set其他费Null() {
                this[this.tablerptBinStat.其他费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is总计Null() {
                return this.IsNull(this.tablerptBinStat.总计Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set总计Null() {
                this[this.tablerptBinStat.总计Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptDeptStatRow : global::System.Data.DataRow {
            
            private rptDeptStatDataTable tablerptDeptStat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptDeptStatRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptDeptStat = ((rptDeptStatDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病人 {
                get {
                    try {
                        return ((string)(this[this.tablerptDeptStat.病人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“病人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.病人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 药费比例 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.药费比例Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“药费比例”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.药费比例Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 姓名 {
                get {
                    try {
                        return ((string)(this[this.tablerptDeptStat.姓名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“姓名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.姓名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal inpatient_id {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.inpatient_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“inpatient_id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.inpatient_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ID {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 床位费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.床位费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“床位费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.床位费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 药品费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.药品费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“药品费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.药品费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 化验费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.化验费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“化验费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.化验费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 治疗费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.治疗费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“治疗费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.治疗费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 放射费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.放射费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“放射费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.放射费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 输血费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.输血费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“输血费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.输血费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 检查费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.检查费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“检查费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.检查费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 手术费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.手术费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“手术费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.手术费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 其他费 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.其他费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“其他费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.其他费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 总计 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.总计Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“总计”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.总计Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 西药 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.西药Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“西药”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.西药Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 中成药 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.中成药Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“中成药”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.中成药Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 中草药 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.中草药Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“中草药”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.中草药Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 自制药 {
                get {
                    try {
                        return ((decimal)(this[this.tablerptDeptStat.自制药Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptDeptStat”中列“自制药”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptDeptStat.自制药Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病人Null() {
                return this.IsNull(this.tablerptDeptStat.病人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病人Null() {
                this[this.tablerptDeptStat.病人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is药费比例Null() {
                return this.IsNull(this.tablerptDeptStat.药费比例Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set药费比例Null() {
                this[this.tablerptDeptStat.药费比例Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is姓名Null() {
                return this.IsNull(this.tablerptDeptStat.姓名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set姓名Null() {
                this[this.tablerptDeptStat.姓名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinpatient_idNull() {
                return this.IsNull(this.tablerptDeptStat.inpatient_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinpatient_idNull() {
                this[this.tablerptDeptStat.inpatient_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tablerptDeptStat.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tablerptDeptStat.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is床位费Null() {
                return this.IsNull(this.tablerptDeptStat.床位费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set床位费Null() {
                this[this.tablerptDeptStat.床位费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is药品费Null() {
                return this.IsNull(this.tablerptDeptStat.药品费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set药品费Null() {
                this[this.tablerptDeptStat.药品费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is化验费Null() {
                return this.IsNull(this.tablerptDeptStat.化验费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set化验费Null() {
                this[this.tablerptDeptStat.化验费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is治疗费Null() {
                return this.IsNull(this.tablerptDeptStat.治疗费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set治疗费Null() {
                this[this.tablerptDeptStat.治疗费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is放射费Null() {
                return this.IsNull(this.tablerptDeptStat.放射费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set放射费Null() {
                this[this.tablerptDeptStat.放射费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is输血费Null() {
                return this.IsNull(this.tablerptDeptStat.输血费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set输血费Null() {
                this[this.tablerptDeptStat.输血费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is检查费Null() {
                return this.IsNull(this.tablerptDeptStat.检查费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set检查费Null() {
                this[this.tablerptDeptStat.检查费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is手术费Null() {
                return this.IsNull(this.tablerptDeptStat.手术费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set手术费Null() {
                this[this.tablerptDeptStat.手术费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is其他费Null() {
                return this.IsNull(this.tablerptDeptStat.其他费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set其他费Null() {
                this[this.tablerptDeptStat.其他费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is总计Null() {
                return this.IsNull(this.tablerptDeptStat.总计Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set总计Null() {
                this[this.tablerptDeptStat.总计Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is西药Null() {
                return this.IsNull(this.tablerptDeptStat.西药Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set西药Null() {
                this[this.tablerptDeptStat.西药Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is中成药Null() {
                return this.IsNull(this.tablerptDeptStat.中成药Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set中成药Null() {
                this[this.tablerptDeptStat.中成药Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is中草药Null() {
                return this.IsNull(this.tablerptDeptStat.中草药Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set中草药Null() {
                this[this.tablerptDeptStat.中草药Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is自制药Null() {
                return this.IsNull(this.tablerptDeptStat.自制药Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set自制药Null() {
                this[this.tablerptDeptStat.自制药Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptShiftRow : global::System.Data.DataRow {
            
            private rptShiftDataTable tablerptShift;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptShiftRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptShift = ((rptShiftDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 姓名 {
                get {
                    try {
                        return ((string)(this[this.tablerptShift.姓名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptShift”中列“姓名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptShift.姓名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 星期一 {
                get {
                    try {
                        return ((string)(this[this.tablerptShift.星期一Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptShift”中列“星期一”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptShift.星期一Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 星期二 {
                get {
                    try {
                        return ((string)(this[this.tablerptShift.星期二Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptShift”中列“星期二”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptShift.星期二Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 星期三 {
                get {
                    try {
                        return ((string)(this[this.tablerptShift.星期三Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptShift”中列“星期三”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptShift.星期三Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 星期四 {
                get {
                    try {
                        return ((string)(this[this.tablerptShift.星期四Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptShift”中列“星期四”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptShift.星期四Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 星期五 {
                get {
                    try {
                        return ((string)(this[this.tablerptShift.星期五Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptShift”中列“星期五”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptShift.星期五Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 星期六 {
                get {
                    try {
                        return ((string)(this[this.tablerptShift.星期六Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptShift”中列“星期六”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptShift.星期六Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 星期日 {
                get {
                    try {
                        return ((string)(this[this.tablerptShift.星期日Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“rptShift”中列“星期日”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablerptShift.星期日Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is姓名Null() {
                return this.IsNull(this.tablerptShift.姓名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set姓名Null() {
                this[this.tablerptShift.姓名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is星期一Null() {
                return this.IsNull(this.tablerptShift.星期一Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set星期一Null() {
                this[this.tablerptShift.星期一Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is星期二Null() {
                return this.IsNull(this.tablerptShift.星期二Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set星期二Null() {
                this[this.tablerptShift.星期二Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is星期三Null() {
                return this.IsNull(this.tablerptShift.星期三Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set星期三Null() {
                this[this.tablerptShift.星期三Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is星期四Null() {
                return this.IsNull(this.tablerptShift.星期四Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set星期四Null() {
                this[this.tablerptShift.星期四Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is星期五Null() {
                return this.IsNull(this.tablerptShift.星期五Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set星期五Null() {
                this[this.tablerptShift.星期五Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is星期六Null() {
                return this.IsNull(this.tablerptShift.星期六Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set星期六Null() {
                this[this.tablerptShift.星期六Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is星期日Null() {
                return this.IsNull(this.tablerptShift.星期日Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set星期日Null() {
                this[this.tablerptShift.星期日Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HoitemStatRow : global::System.Data.DataRow {
            
            private HoitemStatDataTable tableHoitemStat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HoitemStatRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHoitemStat = ((HoitemStatDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableHoitemStat.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“HoitemStat”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHoitemStat.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableHoitemStat.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“HoitemStat”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHoitemStat.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRICE {
                get {
                    try {
                        return ((string)(this[this.tableHoitemStat.PRICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“HoitemStat”中列“PRICE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHoitemStat.PRICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CS {
                get {
                    try {
                        return ((string)(this[this.tableHoitemStat.CSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“HoitemStat”中列“CS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHoitemStat.CSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDER_DOC {
                get {
                    try {
                        return ((string)(this[this.tableHoitemStat.ORDER_DOCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“HoitemStat”中列“ORDER_DOC”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHoitemStat.ORDER_DOCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_NAME {
                get {
                    try {
                        return ((string)(this[this.tableHoitemStat.DOC_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“HoitemStat”中列“DOC_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHoitemStat.DOC_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableHoitemStat.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableHoitemStat.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableHoitemStat.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableHoitemStat.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICENull() {
                return this.IsNull(this.tableHoitemStat.PRICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICENull() {
                this[this.tableHoitemStat.PRICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCSNull() {
                return this.IsNull(this.tableHoitemStat.CSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCSNull() {
                this[this.tableHoitemStat.CSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDER_DOCNull() {
                return this.IsNull(this.tableHoitemStat.ORDER_DOCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDER_DOCNull() {
                this[this.tableHoitemStat.ORDER_DOCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOC_NAMENull() {
                return this.IsNull(this.tableHoitemStat.DOC_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOC_NAMENull() {
                this[this.tableHoitemStat.DOC_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _111Row : global::System.Data.DataRow {
            
            private _111DataTable table_111;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _111Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_111 = ((_111DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string a {
                get {
                    try {
                        return ((string)(this[this.table_111.aColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“111”中列“a”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table_111.aColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string b {
                get {
                    try {
                        return ((string)(this[this.table_111.bColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“111”中列“b”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table_111.bColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaNull() {
                return this.IsNull(this.table_111.aColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaNull() {
                this[this.table_111.aColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbNull() {
                return this.IsNull(this.table_111.bColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbNull() {
                this[this.table_111.bColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptDocIncomeRowChangeEvent : global::System.EventArgs {
            
            private rptDocIncomeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDocIncomeRowChangeEvent(rptDocIncomeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDocIncomeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptYYJCRowChangeEvent : global::System.EventArgs {
            
            private rptYYJCRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptYYJCRowChangeEvent(rptYYJCRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptYYJCRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptAppRowChangeEvent : global::System.EventArgs {
            
            private rptAppRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAppRowChangeEvent(rptAppRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptAppRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptBinStatRowChangeEvent : global::System.EventArgs {
            
            private rptBinStatRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptBinStatRowChangeEvent(rptBinStatRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptBinStatRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptDeptStatRowChangeEvent : global::System.EventArgs {
            
            private rptDeptStatRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDeptStatRowChangeEvent(rptDeptStatRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptDeptStatRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptShiftRowChangeEvent : global::System.EventArgs {
            
            private rptShiftRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptShiftRowChangeEvent(rptShiftRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptShiftRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HoitemStatRowChangeEvent : global::System.EventArgs {
            
            private HoitemStatRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoitemStatRowChangeEvent(HoitemStatRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoitemStatRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _111RowChangeEvent : global::System.EventArgs {
            
            private _111Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _111RowChangeEvent(_111Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _111Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591